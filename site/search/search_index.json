{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pysearch Documentation","text":"<p>pysearch is a high-performance, context-aware search engine for Python codebases that supports text/regex/AST/semantic search, providing both CLI and programmable API interfaces, designed for engineering-grade retrieval in large multi-module projects.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Code block matching (functions/classes/decorators/imports/strings/comments, etc.)</li> <li>Context-aware output with result ranking</li> <li>Project-wide indexing and caching with incremental updates</li> <li>Multiple output formats (text/json/highlight)</li> <li>Dual CLI and API interfaces</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Quick Start</li> <li>Configuration</li> <li>Architecture</li> <li>Roadmap</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>This document provides comprehensive API documentation for pysearch, covering all major classes, functions, and types.</p>"},{"location":"api-reference/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>PySearch Class - Main search engine</li> <li>SearchConfig Class - Configuration management</li> <li>Query and Result Types - Data structures</li> <li>Filters and Metadata - Advanced filtering</li> <li>Utility Functions - Helper functions</li> <li>Exception Classes - Error handling</li> </ul>"},{"location":"api-reference/#pysearch-class","title":"PySearch Class","text":"<p>The main entry point for all search operations.</p>"},{"location":"api-reference/#class-definition","title":"Class Definition","text":"<pre><code>class PySearch:\n    \"\"\"\n    Main search engine class for pysearch.\n\n    Orchestrates all search operations including file indexing, content\n    matching, result scoring, and output formatting.\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, config: SearchConfig | None = None, logger: SearchLogger | None = None)\n</code></pre> <p>Parameters:</p> <ul> <li><code>config</code> (SearchConfig, optional): Configuration object. Uses default if None.</li> <li><code>logger</code> (SearchLogger, optional): Custom logger instance. Uses default if None.</li> </ul> <p>Example:</p> <pre><code>from pysearch import PySearch, SearchConfig\n\n# Basic initialization\nengine = PySearch()\n\n# With custom configuration\nconfig = SearchConfig(paths=[\"./src\"], context=5)\nengine = PySearch(config)\n</code></pre>"},{"location":"api-reference/#core-methods","title":"Core Methods","text":""},{"location":"api-reference/#searchpattern-regexfalse-contextnone-outputnone-kwargs","title":"<code>search(pattern, regex=False, context=None, output=None, **kwargs)</code>","text":"<p>High-level search method with convenient parameters.</p> <p>Parameters:</p> <ul> <li><code>pattern</code> (str): Search pattern (text or regex)</li> <li><code>regex</code> (bool): Enable regex matching (default: False)</li> <li><code>context</code> (int, optional): Context lines around matches</li> <li><code>output</code> (OutputFormat, optional): Output format override</li> <li><code>**kwargs</code>: Additional options (use_ast, filters, metadata_filters)</li> </ul> <p>Returns: <code>SearchResult</code> - Complete search results with statistics</p> <p>Example:</p> <pre><code># Simple text search\nresults = engine.search(\"def main\")\n\n# Regex search with context\nresults = engine.search(r\"def \\w+_handler\", regex=True, context=5)\n\n# AST search with filters\nfrom pysearch.types import ASTFilters\nfilters = ASTFilters(func_name=\"main\")\nresults = engine.search(\"def\", use_ast=True, filters=filters)\n</code></pre>"},{"location":"api-reference/#runquery","title":"<code>run(query)</code>","text":"<p>Execute a complete search query with full control.</p> <p>Parameters:</p> <ul> <li><code>query</code> (Query): Complete query specification</li> </ul> <p>Returns: <code>SearchResult</code> - Complete search results with statistics</p> <p>Example:</p> <pre><code>from pysearch.types import Query, ASTFilters, OutputFormat\n\nquery = Query(\n    pattern=\"class.*Test\",\n    use_regex=True,\n    use_ast=True,\n    context=3,\n    output=OutputFormat.JSON,\n    ast_filters=ASTFilters(class_name=\".*Test\")\n)\nresults = engine.run(query)\n</code></pre>"},{"location":"api-reference/#advanced-features","title":"Advanced Features","text":""},{"location":"api-reference/#enable_cachingcache_dirnone-ttl3600","title":"<code>enable_caching(cache_dir=None, ttl=3600)</code>","text":"<p>Enable result caching for improved performance.</p> <p>Parameters:</p> <ul> <li><code>cache_dir</code> (Path, optional): Cache directory path</li> <li><code>ttl</code> (int): Time-to-live in seconds (default: 3600)</li> </ul> <p>Example:</p> <pre><code>engine.enable_caching(ttl=7200)  # 2 hour cache\n</code></pre>"},{"location":"api-reference/#enable_auto_watch","title":"<code>enable_auto_watch()</code>","text":"<p>Enable automatic file watching for real-time updates.</p> <p>Example:</p> <pre><code>engine.enable_auto_watch()\n# Engine will automatically update index when files change\n</code></pre>"},{"location":"api-reference/#enable_multi_reporepositories","title":"<code>enable_multi_repo(repositories)</code>","text":"<p>Enable multi-repository search capabilities.</p> <p>Parameters:</p> <ul> <li><code>repositories</code> (list[RepositoryInfo]): Repository configurations</li> </ul> <p>Example:</p> <pre><code>from pysearch.multi_repo import RepositoryInfo\n\nrepos = [\n    RepositoryInfo(name=\"main\", path=\"./\", priority=1.0),\n    RepositoryInfo(name=\"lib\", path=\"../lib\", priority=0.8)\n]\nengine.enable_multi_repo(repos)\n</code></pre>"},{"location":"api-reference/#properties","title":"Properties","text":""},{"location":"api-reference/#history","title":"<code>history</code>","text":"<p>Access to search history tracking.</p> <pre><code># Get recent searches\nrecent = engine.history.get_recent(limit=10)\n\n# Get search statistics\nstats = engine.history.get_stats()\n</code></pre>"},{"location":"api-reference/#indexer","title":"<code>indexer</code>","text":"<p>Access to the file indexer for advanced operations.</p> <pre><code># Force reindex\nengine.indexer.rebuild_index()\n\n# Get index statistics\nstats = engine.indexer.get_stats()\n</code></pre>"},{"location":"api-reference/#searchconfig-class","title":"SearchConfig Class","text":"<p>Configuration management for search operations.</p>"},{"location":"api-reference/#class-definition_1","title":"Class Definition","text":"<pre><code>@dataclass(slots=True)\nclass SearchConfig:\n    \"\"\"\n    Central configuration object for all search operations.\n\n    Provides comprehensive settings for search scope, behavior,\n    performance, and output formatting.\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#core-configuration","title":"Core Configuration","text":""},{"location":"api-reference/#search-scope","title":"Search Scope","text":"<pre><code>paths: list[str] = field(default_factory=lambda: [\".\"])\ninclude: list[str] | None = None  # Auto-detect if None\nexclude: list[str] | None = None  # Use defaults if None\nlanguages: set[Language] | None = None  # Auto-detect if None\n</code></pre> <p>Example:</p> <pre><code>config = SearchConfig(\n    paths=[\"./src\", \"./tests\"],\n    include=[\"**/*.py\", \"**/*.pyx\"],\n    exclude=[\"**/.venv/**\", \"**/build/**\"],\n    languages={Language.PYTHON}\n)\n</code></pre>"},{"location":"api-reference/#search-behavior","title":"Search Behavior","text":"<pre><code>context: int = 2\noutput_format: OutputFormat = OutputFormat.TEXT\nfollow_symlinks: bool = False\nfile_size_limit: int = 2_000_000  # 2MB\n</code></pre>"},{"location":"api-reference/#content-toggles","title":"Content Toggles","text":"<pre><code>enable_docstrings: bool = True\nenable_comments: bool = True\nenable_strings: bool = True\n</code></pre> <p>Example:</p> <pre><code># Search only in code, skip docstrings and comments\nconfig = SearchConfig(\n    enable_docstrings=False,\n    enable_comments=False,\n    enable_strings=True\n)\n</code></pre>"},{"location":"api-reference/#performance-settings","title":"Performance Settings","text":"<pre><code>parallel: bool = True\nworkers: int = 0  # 0 = auto (cpu_count)\nstrict_hash_check: bool = False\ndir_prune_exclude: bool = True\n</code></pre> <p>Example:</p> <pre><code># High-performance configuration\nconfig = SearchConfig(\n    parallel=True,\n    workers=8,\n    strict_hash_check=False,  # Faster, less precise\n    dir_prune_exclude=True    # Skip excluded directories\n)\n</code></pre>"},{"location":"api-reference/#methods","title":"Methods","text":""},{"location":"api-reference/#get_include_patterns","title":"<code>get_include_patterns()</code>","text":"<p>Get resolved include patterns based on language detection.</p> <p>Returns: <code>list[str]</code> - List of glob patterns</p>"},{"location":"api-reference/#get_exclude_patterns","title":"<code>get_exclude_patterns()</code>","text":"<p>Get resolved exclude patterns with sensible defaults.</p> <p>Returns: <code>list[str]</code> - List of glob patterns</p>"},{"location":"api-reference/#resolve_cache_dir","title":"<code>resolve_cache_dir()</code>","text":"<p>Get the resolved cache directory path.</p> <p>Returns: <code>Path</code> - Cache directory path</p> <p>Example:</p> <pre><code>config = SearchConfig(paths=[\"./src\"])\ncache_dir = config.resolve_cache_dir()\nprint(f\"Cache directory: {cache_dir}\")\n</code></pre>"},{"location":"api-reference/#query-and-result-types","title":"Query and Result Types","text":""},{"location":"api-reference/#query-class","title":"Query Class","text":"<p>Complete search query specification.</p> <pre><code>@dataclass(slots=True)\nclass Query:\n    \"\"\"\n    Complete search query specification with all parameters.\n    \"\"\"\n    pattern: str\n    use_regex: bool = False\n    use_ast: bool = False\n    use_semantic: bool = False\n    context: int = 2\n    output: OutputFormat = OutputFormat.TEXT\n    filters: ASTFilters | None = None\n    metadata_filters: MetadataFilters | None = None\n    search_docstrings: bool = True\n    search_comments: bool = True\n    search_strings: bool = True\n</code></pre> <p>Example:</p> <pre><code>from pysearch.types import Query, ASTFilters, OutputFormat\n\n# Complex query example\nquery = Query(\n    pattern=\"async def.*handler\",\n    use_regex=True,\n    use_ast=True,\n    context=5,\n    output=OutputFormat.JSON,\n    ast_filters=ASTFilters(\n        func_name=\".*handler\",\n        decorator=\"lru_cache\"\n    ),\n    search_docstrings=False\n)\n</code></pre>"},{"location":"api-reference/#searchresult-class","title":"SearchResult Class","text":"<p>Complete search results with metadata and statistics.</p> <pre><code>@dataclass(slots=True)\nclass SearchResult:\n    \"\"\"\n    Complete search results with items and metadata.\n    \"\"\"\n    items: list[SearchItem]\n    stats: SearchStats\n    query: Query\n    errors: list[str] = field(default_factory=list)\n</code></pre> <p>Properties:</p> <ul> <li><code>items</code>: List of individual search results</li> <li><code>stats</code>: Performance and match statistics</li> <li><code>query</code>: Original query that produced these results</li> <li><code>errors</code>: Any errors encountered during search</li> </ul>"},{"location":"api-reference/#searchitem-class","title":"SearchItem Class","text":"<p>Individual search result with context and match information.</p> <pre><code>@dataclass(slots=True)\nclass SearchItem:\n    \"\"\"\n    Individual search result item with context.\n    \"\"\"\n    file: Path\n    start_line: int\n    end_line: int\n    lines: list[str]\n    match_spans: list[MatchSpan] = field(default_factory=list)\n    score: float = 0.0\n    metadata: FileMetadata | None = None\n</code></pre> <p>Example:</p> <pre><code># Process search results\nfor item in results.items:\n    print(f\"Found in {item.file} (score: {item.score:.2f})\")\n    print(f\"Lines {item.start_line}-{item.end_line}:\")\n\n    for i, line in enumerate(item.lines):\n        line_num = item.start_line + i\n        print(f\"  {line_num:4d}: {line}\")\n\n    # Highlight matches\n    for span in item.match_spans:\n        line_idx, (start_col, end_col) = span\n        print(f\"    Match at line {item.start_line + line_idx}, cols {start_col}-{end_col}\")\n</code></pre>"},{"location":"api-reference/#searchstats-class","title":"SearchStats Class","text":"<p>Performance and match statistics.</p> <pre><code>@dataclass(slots=True)\nclass SearchStats:\n    \"\"\"\n    Search performance and match statistics.\n    \"\"\"\n    files_scanned: int = 0\n    files_matched: int = 0\n    total_matches: int = 0\n    elapsed_ms: float = 0.0\n    cache_hits: int = 0\n    cache_misses: int = 0\n    index_size: int = 0\n</code></pre> <p>Example:</p> <pre><code>stats = results.stats\nprint(f\"Scanned {stats.files_scanned} files in {stats.elapsed_ms:.1f}ms\")\nprint(f\"Found {stats.total_matches} matches in {stats.files_matched} files\")\nprint(f\"Cache efficiency: {stats.cache_hits}/{stats.cache_hits + stats.cache_misses}\")\n</code></pre>"},{"location":"api-reference/#filters-and-metadata","title":"Filters and Metadata","text":""},{"location":"api-reference/#astfilters-class","title":"ASTFilters Class","text":"<p>AST-based filtering for structural search.</p> <pre><code>@dataclass(slots=True)\nclass ASTFilters:\n    \"\"\"\n    AST-based filters for structural code search.\n    \"\"\"\n    func_name: str | None = None\n    class_name: str | None = None\n    decorator: str | None = None\n    imported: str | None = None\n</code></pre> <p>Parameters:</p> <ul> <li><code>func_name</code> (str, optional): Regex pattern for function names</li> <li><code>class_name</code> (str, optional): Regex pattern for class names</li> <li><code>decorator</code> (str, optional): Regex pattern for decorator names</li> <li><code>imported</code> (str, optional): Regex pattern for import symbols</li> </ul> <p>Example:</p> <pre><code>from pysearch.types import ASTFilters\n\n# Find async handler functions with caching\nfilters = ASTFilters(\n    func_name=\".*handler$\",\n    decorator=\"(lru_cache|cache)\",\n)\n\n# Find test classes\nfilters = ASTFilters(\n    class_name=\"Test.*|.*Test$\"\n)\n\n# Find specific imports\nfilters = ASTFilters(\n    imported=\"requests\\\\.(get|post)\"\n)\n</code></pre>"},{"location":"api-reference/#metadatafilters-class","title":"MetadataFilters Class","text":"<p>Advanced metadata-based filtering.</p> <pre><code>@dataclass(slots=True)\nclass MetadataFilters:\n    \"\"\"\n    Advanced metadata-based filters for file selection.\n    \"\"\"\n    min_lines: int | None = None\n    max_lines: int | None = None\n    min_size: int | None = None\n    max_size: int | None = None\n    languages: set[Language] | None = None\n    authors: set[str] | None = None\n    modified_after: str | None = None\n    modified_before: str | None = None\n</code></pre> <p>Example:</p> <pre><code>from pysearch.types import MetadataFilters, Language\nfrom datetime import datetime, timedelta\n\n# Find substantial Python files modified recently\nfilters = MetadataFilters(\n    min_lines=100,\n    max_size=1024*1024,  # 1MB\n    languages={Language.PYTHON},\n    modified_after=\"2024-01-01\"\n)\n\n# Find files by specific authors\nfilters = MetadataFilters(\n    authors={\"alice\", \"bob\"},\n    min_lines=50\n)\n</code></pre>"},{"location":"api-reference/#filemetadata-class","title":"FileMetadata Class","text":"<p>Extended file metadata for advanced operations.</p> <pre><code>@dataclass(slots=True)\nclass FileMetadata:\n    \"\"\"\n    Extended file metadata for advanced filtering.\n    \"\"\"\n    path: Path\n    size: int\n    mtime: float\n    language: Language\n    encoding: str = \"utf-8\"\n    line_count: int | None = None\n    author: str | None = None\n    created_date: float | None = None\n    modified_date: float | None = None\n</code></pre>"},{"location":"api-reference/#utility-functions","title":"Utility Functions","text":""},{"location":"api-reference/#language-detection","title":"Language Detection","text":""},{"location":"api-reference/#detect_languagefile_path","title":"<code>detect_language(file_path)</code>","text":"<p>Detect programming language from file path/extension.</p> <p>Parameters:</p> <ul> <li><code>file_path</code> (Path | str): File path to analyze</li> </ul> <p>Returns: <code>Language</code> - Detected language or Language.UNKNOWN</p> <p>Example:</p> <pre><code>from pysearch.language_detection import detect_language\n\nlang = detect_language(\"example.py\")\nprint(f\"Detected language: {lang}\")  # Language.PYTHON\n</code></pre>"},{"location":"api-reference/#get_supported_languages","title":"<code>get_supported_languages()</code>","text":"<p>Get list of all supported programming languages.</p> <p>Returns: <code>list[Language]</code> - List of supported languages</p> <p>Example:</p> <pre><code>from pysearch.language_detection import get_supported_languages\n\nlanguages = get_supported_languages()\nprint(f\"Supported: {[lang.value for lang in languages]}\")\n</code></pre>"},{"location":"api-reference/#metadata-utilities","title":"Metadata Utilities","text":""},{"location":"api-reference/#create_metadata_filterskwargs","title":"<code>create_metadata_filters(**kwargs)</code>","text":"<p>Create MetadataFilters with validation.</p> <p>Parameters:</p> <ul> <li><code>**kwargs</code>: Filter parameters</li> </ul> <p>Returns: <code>MetadataFilters</code> - Validated filter object</p> <p>Example:</p> <pre><code>from pysearch.utils import create_metadata_filters\n\nfilters = create_metadata_filters(\n    min_lines=50,\n    languages=[\"python\", \"javascript\"],\n    modified_after=\"2024-01-01\"\n)\n</code></pre>"},{"location":"api-reference/#create_file_metadatafile_path","title":"<code>create_file_metadata(file_path)</code>","text":"<p>Create FileMetadata object for a file.</p> <p>Parameters:</p> <ul> <li><code>file_path</code> (Path): File to analyze</li> </ul> <p>Returns: <code>FileMetadata</code> - File metadata object</p>"},{"location":"api-reference/#logging-configuration","title":"Logging Configuration","text":""},{"location":"api-reference/#configure_logginglevelinfo-formatnone","title":"<code>configure_logging(level=\"INFO\", format=None)</code>","text":"<p>Configure pysearch logging.</p> <p>Parameters:</p> <ul> <li><code>level</code> (str): Log level (DEBUG, INFO, WARNING, ERROR)</li> <li><code>format</code> (str, optional): Custom log format</li> </ul> <p>Example:</p> <pre><code>from pysearch.logging_config import configure_logging\n\n# Enable debug logging\nconfigure_logging(level=\"DEBUG\")\n\n# Custom format\nconfigure_logging(\n    level=\"INFO\",\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n)\n</code></pre>"},{"location":"api-reference/#enable_debug_logging","title":"<code>enable_debug_logging()</code>","text":"<p>Enable debug logging with detailed output.</p>"},{"location":"api-reference/#disable_logging","title":"<code>disable_logging()</code>","text":"<p>Disable all pysearch logging.</p>"},{"location":"api-reference/#exception-classes","title":"Exception Classes","text":""},{"location":"api-reference/#searcherror","title":"SearchError","text":"<p>Base exception for all search-related errors.</p> <pre><code>class SearchError(Exception):\n    \"\"\"Base exception for search operations.\"\"\"\n</code></pre>"},{"location":"api-reference/#fileaccesserror","title":"FileAccessError","text":"<p>Raised when file access fails.</p> <pre><code>class FileAccessError(SearchError):\n    \"\"\"Raised when file cannot be accessed.\"\"\"\n</code></pre>"},{"location":"api-reference/#permissionerror","title":"PermissionError","text":"<p>Raised when insufficient permissions.</p> <pre><code>class PermissionError(SearchError):\n    \"\"\"Raised when permission denied.\"\"\"\n</code></pre>"},{"location":"api-reference/#encodingerror","title":"EncodingError","text":"<p>Raised when file encoding issues occur.</p> <pre><code>class EncodingError(SearchError):\n    \"\"\"Raised when file encoding cannot be determined.\"\"\"\n</code></pre>"},{"location":"api-reference/#parsingerror","title":"ParsingError","text":"<p>Raised when AST parsing fails.</p> <pre><code>class ParsingError(SearchError):\n    \"\"\"Raised when AST parsing fails.\"\"\"\n</code></pre> <p>Example Error Handling:</p> <pre><code>from pysearch import PySearch, SearchError, FileAccessError\n\ntry:\n    engine = PySearch()\n    results = engine.search(\"pattern\")\nexcept FileAccessError as e:\n    print(f\"File access error: {e}\")\nexcept ParsingError as e:\n    print(f\"Parsing error: {e}\")\nexcept SearchError as e:\n    print(f\"Search error: {e}\")\n</code></pre>"},{"location":"api-reference/#enumerations","title":"Enumerations","text":""},{"location":"api-reference/#outputformat","title":"OutputFormat","text":"<p>Available output formats.</p> <pre><code>class OutputFormat(str, Enum):\n    TEXT = \"text\"\n    JSON = \"json\"\n    HIGHLIGHT = \"highlight\"\n</code></pre>"},{"location":"api-reference/#language","title":"Language","text":"<p>Supported programming languages.</p> <pre><code>class Language(str, Enum):\n    PYTHON = \"python\"\n    JAVASCRIPT = \"javascript\"\n    TYPESCRIPT = \"typescript\"\n    JAVA = \"java\"\n    CPP = \"cpp\"\n    C = \"c\"\n    RUST = \"rust\"\n    GO = \"go\"\n    # ... and more\n</code></pre>"},{"location":"api-reference/#advanced-usage-patterns","title":"Advanced Usage Patterns","text":""},{"location":"api-reference/#batch-processing","title":"Batch Processing","text":"<pre><code>from pysearch import PySearch, SearchConfig\nfrom pysearch.types import Query\n\n# Setup for batch processing\nconfig = SearchConfig(\n    paths=[\"./src\"],\n    parallel=True,\n    workers=8\n)\nengine = PySearch(config)\n\n# Process multiple queries\nqueries = [\n    Query(pattern=\"def.*handler\", use_regex=True),\n    Query(pattern=\"class.*Test\", use_regex=True),\n    Query(pattern=\"import requests\", use_ast=True)\n]\n\nresults = []\nfor query in queries:\n    result = engine.run(query)\n    results.append(result)\n    print(f\"Query '{query.pattern}': {len(result.items)} matches\")\n</code></pre>"},{"location":"api-reference/#custom-result-processing","title":"Custom Result Processing","text":"<pre><code>def process_results(results):\n    \"\"\"Custom result processing with grouping and filtering.\"\"\"\n\n    # Group by file\n    by_file = {}\n    for item in results.items:\n        if item.file not in by_file:\n            by_file[item.file] = []\n        by_file[item.file].append(item)\n\n    # Sort by score\n    for file_path, items in by_file.items():\n        items.sort(key=lambda x: x.score, reverse=True)\n\n        print(f\"\\n{file_path}:\")\n        for item in items[:3]:  # Top 3 matches per file\n            print(f\"  Score: {item.score:.2f}\")\n            print(f\"  Lines {item.start_line}-{item.end_line}\")\n</code></pre>"},{"location":"api-reference/#integration-with-external-tools","title":"Integration with External Tools","text":"<pre><code>import json\nfrom pathlib import Path\n\ndef export_to_json(results, output_file):\n    \"\"\"Export results to JSON for external processing.\"\"\"\n\n    data = {\n        \"query\": {\n            \"pattern\": results.query.pattern,\n            \"use_regex\": results.query.use_regex,\n            \"use_ast\": results.query.use_ast\n        },\n        \"stats\": {\n            \"files_scanned\": results.stats.files_scanned,\n            \"total_matches\": results.stats.total_matches,\n            \"elapsed_ms\": results.stats.elapsed_ms\n        },\n        \"matches\": [\n            {\n                \"file\": str(item.file),\n                \"start_line\": item.start_line,\n                \"end_line\": item.end_line,\n                \"score\": item.score,\n                \"lines\": item.lines\n            }\n            for item in results.items\n        ]\n    }\n\n    Path(output_file).write_text(json.dumps(data, indent=2))\n</code></pre>"},{"location":"api-reference/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api-reference/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use appropriate include/exclude patterns to limit search scope</li> <li>Enable parallel processing for large codebases</li> <li>Configure caching for repeated searches</li> <li>Use AST filters to narrow structural searches</li> <li>Set reasonable context limits to avoid excessive output</li> <li>Disable unnecessary content types (docstrings, comments, strings)</li> </ol>"},{"location":"api-reference/#memory-management","title":"Memory Management","text":"<pre><code># For very large codebases\nconfig = SearchConfig(\n    file_size_limit=1_000_000,  # 1MB limit\n    workers=4,  # Limit parallel workers\n    strict_hash_check=False  # Reduce I/O\n)\n</code></pre>"},{"location":"api-reference/#monitoring-performance","title":"Monitoring Performance","text":"<pre><code>results = engine.search(\"pattern\")\nstats = results.stats\n\nprint(f\"Performance metrics:\")\nprint(f\"  Files scanned: {stats.files_scanned}\")\nprint(f\"  Elapsed time: {stats.elapsed_ms:.1f}ms\")\nprint(f\"  Cache efficiency: {stats.cache_hits / (stats.cache_hits + stats.cache_misses):.2%}\")\n</code></pre>"},{"location":"architecture/","title":"Architecture Design","text":"<p>This document provides a comprehensive overview of pysearch's internal architecture, design principles, and implementation details for contributors and advanced users.</p>"},{"location":"architecture/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Core Architecture</li> <li>Module Organization</li> <li>Data Flow</li> <li>Component Details</li> <li>Performance Design</li> <li>Extension Points</li> <li>Design Principles</li> <li>Future Architecture</li> </ul>"},{"location":"architecture/#overview","title":"Overview","text":"<p>pysearch is designed as a modular, high-performance search engine with clear separation of concerns and extensible architecture. The system follows a pipeline-based approach where each component has specific responsibilities.</p>"},{"location":"architecture/#key-design-goals","title":"Key Design Goals","text":"<ol> <li>Performance: Optimized for large codebases with parallel processing</li> <li>Modularity: Clear component boundaries for maintainability</li> <li>Extensibility: Plugin-friendly architecture for new features</li> <li>Reliability: Robust error handling and graceful degradation</li> <li>Usability: Simple API with powerful configuration options</li> </ol>"},{"location":"architecture/#architecture-layers","title":"Architecture Layers","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    User Interface Layer                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  CLI Interface  \u2502  Python API  \u2502  MCP Servers  \u2502  IDE Hooks \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                     Core Engine Layer                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  PySearch  \u2502  Query Engine  \u2502  Result Processor  \u2502  Config  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                   Processing Layer                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Indexer  \u2502  Matchers  \u2502  Scorer  \u2502  Formatter  \u2502  Cache    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                    Foundation Layer                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  File System  \u2502  Language Detection  \u2502  Utils  \u2502  Types    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#core-architecture","title":"Core Architecture","text":""},{"location":"architecture/#component-interaction","title":"Component Interaction","text":"<pre><code>graph TD\n    A[CLI/API] --&gt; B[PySearch Engine]\n    B --&gt; C[Configuration]\n    B --&gt; D[Indexer]\n    B --&gt; E[Query Processor]\n\n    D --&gt; F[File Scanner]\n    D --&gt; G[Cache Manager]\n\n    E --&gt; H[Text Matcher]\n    E --&gt; I[AST Matcher]\n    E --&gt; J[Semantic Matcher]\n\n    H --&gt; K[Scorer]\n    I --&gt; K\n    J --&gt; K\n\n    K --&gt; L[Result Processor]\n    L --&gt; M[Formatter]\n\n    F --&gt; N[Language Detection]\n    G --&gt; O[Disk Cache]\n\n    style B fill:#e1f5fe\n    style E fill:#f3e5f5\n    style K fill:#e8f5e8</code></pre>"},{"location":"architecture/#request-flow","title":"Request Flow","text":"<ol> <li>Input Processing: CLI/API receives user request</li> <li>Configuration: Parse and validate search parameters</li> <li>Indexing: Scan and cache file metadata</li> <li>Matching: Execute search across multiple matchers</li> <li>Scoring: Rank and score results</li> <li>Output: Format and return results</li> </ol>"},{"location":"architecture/#module-organization","title":"Module Organization","text":""},{"location":"architecture/#core-modules","title":"Core Modules","text":""},{"location":"architecture/#pysearchapi","title":"<code>pysearch.api</code>","text":"<p>Purpose: Main API entry point and orchestration Key Classes: <code>PySearch</code> Responsibilities:</p> <ul> <li>Coordinate all search operations</li> <li>Manage component lifecycle</li> <li>Handle high-level error recovery</li> <li>Provide convenience methods</li> </ul>"},{"location":"architecture/#pysearchconfig","title":"<code>pysearch.config</code>","text":"<p>Purpose: Configuration management and validation Key Classes: <code>SearchConfig</code>, <code>RankStrategy</code> Responsibilities:</p> <ul> <li>Define configuration schema</li> <li>Validate configuration parameters</li> <li>Provide configuration defaults</li> <li>Handle environment variable integration</li> </ul>"},{"location":"architecture/#pysearchindexer","title":"<code>pysearch.indexer</code>","text":"<p>Purpose: File discovery and metadata management Key Classes: <code>Indexer</code>, <code>FileIndex</code> Responsibilities:</p> <ul> <li>Traverse directory structures</li> <li>Track file metadata (size, mtime, hash)</li> <li>Implement incremental indexing</li> <li>Handle file change detection</li> </ul>"},{"location":"architecture/#pysearchmatchers","title":"<code>pysearch.matchers</code>","text":"<p>Purpose: Content matching and pattern detection Key Classes: <code>TextMatcher</code>, <code>ASTMatcher</code>, <code>SemanticMatcher</code> Responsibilities:</p> <ul> <li>Execute text/regex searches</li> <li>Parse and match AST structures</li> <li>Perform semantic similarity matching</li> <li>Extract match context and spans</li> </ul>"},{"location":"architecture/#pysearchscorer","title":"<code>pysearch.scorer</code>","text":"<p>Purpose: Result ranking and scoring Key Classes: <code>ResultScorer</code>, <code>RankingStrategy</code> Responsibilities:</p> <ul> <li>Calculate relevance scores</li> <li>Apply ranking strategies</li> <li>Deduplicate overlapping results</li> <li>Cluster similar results</li> </ul>"},{"location":"architecture/#pysearchformatter","title":"<code>pysearch.formatter</code>","text":"<p>Purpose: Output rendering and formatting Key Classes: <code>TextFormatter</code>, <code>JSONFormatter</code>, <code>HighlightFormatter</code> Responsibilities:</p> <ul> <li>Render results in various formats</li> <li>Apply syntax highlighting</li> <li>Generate structured output</li> <li>Handle output streaming</li> </ul>"},{"location":"architecture/#support-modules","title":"Support Modules","text":""},{"location":"architecture/#pysearchtypes","title":"<code>pysearch.types</code>","text":"<p>Purpose: Type definitions and data structures Key Types: <code>Query</code>, <code>SearchResult</code>, <code>SearchItem</code>, <code>ASTFilters</code> Responsibilities:</p> <ul> <li>Define core data structures</li> <li>Provide type annotations</li> <li>Implement data validation</li> <li>Support serialization</li> </ul>"},{"location":"architecture/#pysearchutils","title":"<code>pysearch.utils</code>","text":"<p>Purpose: Common utilities and helpers Key Functions: File I/O, text processing, path handling Responsibilities:</p> <ul> <li>Provide reusable utilities</li> <li>Handle cross-platform compatibility</li> <li>Implement common algorithms</li> <li>Support debugging and diagnostics</li> </ul>"},{"location":"architecture/#pysearchlanguage_detection","title":"<code>pysearch.language_detection</code>","text":"<p>Purpose: Programming language identification Key Functions: <code>detect_language</code>, <code>get_supported_languages</code> Responsibilities:</p> <ul> <li>Detect file programming languages</li> <li>Map file extensions to languages</li> <li>Support language-specific processing</li> <li>Handle special file types</li> </ul>"},{"location":"architecture/#pysearcherror_handling","title":"<code>pysearch.error_handling</code>","text":"<p>Purpose: Error management and reporting Key Classes: <code>SearchError</code>, <code>ErrorCollector</code> Responsibilities:</p> <ul> <li>Define exception hierarchy</li> <li>Collect and aggregate errors</li> <li>Provide error context</li> <li>Support error recovery</li> </ul>"},{"location":"architecture/#advanced-modules","title":"Advanced Modules","text":""},{"location":"architecture/#pysearchcache_manager","title":"<code>pysearch.cache_manager</code>","text":"<p>Purpose: Advanced caching strategies Key Classes: <code>CacheManager</code>, <code>DiskCache</code>, <code>MemoryCache</code> Responsibilities:</p> <ul> <li>Implement multi-level caching</li> <li>Handle cache eviction policies</li> <li>Provide cache statistics</li> <li>Support cache persistence</li> </ul>"},{"location":"architecture/#pysearchfile_watcher","title":"<code>pysearch.file_watcher</code>","text":"<p>Purpose: Real-time file change monitoring Key Classes: <code>FileWatcher</code>, <code>WatchManager</code> Responsibilities:</p> <ul> <li>Monitor file system changes</li> <li>Trigger incremental updates</li> <li>Handle batch change processing</li> <li>Support cross-platform watching</li> </ul>"},{"location":"architecture/#pysearchmulti_repo","title":"<code>pysearch.multi_repo</code>","text":"<p>Purpose: Multi-repository search capabilities Key Classes: <code>MultiRepoEngine</code>, <code>RepositoryInfo</code> Responsibilities:</p> <ul> <li>Coordinate cross-repository searches</li> <li>Manage repository priorities</li> <li>Handle repository-specific configuration</li> <li>Aggregate multi-repo results</li> </ul>"},{"location":"architecture/#pysearchsemantic_advanced","title":"<code>pysearch.semantic_advanced</code>","text":"<p>Purpose: Advanced semantic search features Key Classes: <code>SemanticEngine</code>, <code>EmbeddingProvider</code> Responsibilities:</p> <ul> <li>Implement semantic similarity</li> <li>Support multiple embedding backends</li> <li>Handle semantic indexing</li> <li>Provide semantic ranking</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#search-execution-pipeline","title":"Search Execution Pipeline","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant A as API/CLI\n    participant P as PySearch\n    participant I as Indexer\n    participant M as Matchers\n    participant S as Scorer\n    participant F as Formatter\n\n    U-&gt;&gt;A: Search Request\n    A-&gt;&gt;P: Create Query\n    P-&gt;&gt;I: Get File Index\n    I--&gt;&gt;P: File Metadata\n\n    par Text Matching\n        P-&gt;&gt;M: Text Search\n        M--&gt;&gt;P: Text Results\n    and AST Matching\n        P-&gt;&gt;M: AST Search\n        M--&gt;&gt;P: AST Results\n    and Semantic Matching\n        P-&gt;&gt;M: Semantic Search\n        M--&gt;&gt;P: Semantic Results\n    end\n\n    P-&gt;&gt;S: Score Results\n    S--&gt;&gt;P: Ranked Results\n    P-&gt;&gt;F: Format Output\n    F--&gt;&gt;P: Formatted Results\n    P--&gt;&gt;A: Search Results\n    A--&gt;&gt;U: Response</code></pre>"},{"location":"architecture/#indexing-process","title":"Indexing Process","text":"<pre><code>flowchart TD\n    A[Start Indexing] --&gt; B[Scan Directories]\n    B --&gt; C{File Changed?}\n    C --&gt;|Yes| D[Read File Metadata]\n    C --&gt;|No| E[Use Cached Data]\n    D --&gt; F[Update Index]\n    E --&gt; G[Check Next File]\n    F --&gt; G\n    G --&gt; H{More Files?}\n    H --&gt;|Yes| C\n    H --&gt;|No| I[Index Complete]\n\n    style A fill:#e3f2fd\n    style I fill:#e8f5e8\n    style F fill:#fff3e0</code></pre>"},{"location":"architecture/#matching-process","title":"Matching Process","text":"<pre><code>flowchart TD\n    A[Receive Query] --&gt; B[Parse Pattern]\n    B --&gt; C{Match Type?}\n\n    C --&gt;|Text| D[Text Matcher]\n    C --&gt;|Regex| E[Regex Matcher]\n    C --&gt;|AST| F[AST Matcher]\n    C --&gt;|Semantic| G[Semantic Matcher]\n\n    D --&gt; H[Extract Context]\n    E --&gt; H\n    F --&gt; I[Apply AST Filters]\n    G --&gt; J[Calculate Similarity]\n\n    I --&gt; H\n    J --&gt; H\n    H --&gt; K[Create SearchItem]\n    K --&gt; L[Return Results]\n\n    style A fill:#e3f2fd\n    style L fill:#e8f5e8</code></pre>"},{"location":"architecture/#component-details","title":"Component Details","text":""},{"location":"architecture/#pysearch-engine","title":"PySearch Engine","text":"<p>The central orchestrator that coordinates all search operations.</p> <p>Key Responsibilities:</p> <ul> <li>Manage component lifecycle</li> <li>Handle configuration validation</li> <li>Coordinate parallel processing</li> <li>Provide error recovery</li> <li>Maintain search history</li> </ul> <p>Design Patterns:</p> <ul> <li>Facade Pattern: Simplifies complex subsystem interactions</li> <li>Strategy Pattern: Pluggable matching and scoring strategies</li> <li>Observer Pattern: File watching and change notifications</li> </ul>"},{"location":"architecture/#indexer","title":"Indexer","text":"<p>Manages file discovery and metadata tracking with incremental updates.</p> <p>Key Features:</p> <ul> <li>Incremental Indexing: Only processes changed files</li> <li>Metadata Caching: Stores file size, mtime, and hash</li> <li>Directory Pruning: Skips excluded directories early</li> <li>Parallel Scanning: Multi-threaded directory traversal</li> </ul> <p>Performance Optimizations:</p> <ul> <li>Lazy file reading (only when needed)</li> <li>Efficient change detection</li> <li>Memory-mapped file access for large files</li> <li>Batch processing for metadata updates</li> </ul>"},{"location":"architecture/#matchers","title":"Matchers","text":"<p>Implement different search strategies with pluggable architecture.</p>"},{"location":"architecture/#text-matcher","title":"Text Matcher","text":"<ul> <li>Regex Engine: Uses <code>regex</code> library for enhanced features</li> <li>Context Extraction: Efficiently extracts surrounding lines</li> <li>Match Spans: Tracks exact match positions</li> <li>Encoding Handling: Robust text encoding detection</li> </ul>"},{"location":"architecture/#ast-matcher","title":"AST Matcher","text":"<ul> <li>Python AST: Uses built-in <code>ast</code> module</li> <li>Node Filtering: Supports function/class/decorator filters</li> <li>Structural Queries: Matches code structure patterns</li> <li>Error Recovery: Handles syntax errors gracefully</li> </ul>"},{"location":"architecture/#semantic-matcher","title":"Semantic Matcher","text":"<ul> <li>Lightweight Features: Basic semantic signals</li> <li>Pluggable Backends: Support for external embeddings</li> <li>Similarity Scoring: Cosine similarity and other metrics</li> <li>Caching: Semantic embeddings cache</li> </ul>"},{"location":"architecture/#scorer","title":"Scorer","text":"<p>Implements sophisticated ranking and scoring algorithms.</p> <p>Scoring Factors:</p> <ul> <li>Match Quality: Exact vs. partial matches</li> <li>Context Relevance: Surrounding code context</li> <li>File Importance: File size, modification time</li> <li>Structural Weight: AST vs. text matches</li> <li>Frequency: Match count and distribution</li> </ul> <p>Ranking Strategies:</p> <ul> <li>Default: Balanced scoring across all factors</li> <li>Precision: Favor exact matches</li> <li>Recall: Favor broader matches</li> <li>Custom: User-defined scoring weights</li> </ul>"},{"location":"architecture/#formatter","title":"Formatter","text":"<p>Handles output rendering with multiple format support.</p> <p>Output Formats:</p> <ul> <li>Text: Human-readable console output</li> <li>JSON: Structured data for programmatic use</li> <li>Highlight: Syntax-highlighted terminal output</li> <li>HTML: Web-friendly formatted output (future)</li> </ul> <p>Features:</p> <ul> <li>Streaming: Large result set streaming</li> <li>Pagination: Result chunking for large outputs</li> <li>Compression: Optional output compression</li> <li>Templating: Customizable output templates</li> </ul>"},{"location":"architecture/#performance-design","title":"Performance Design","text":""},{"location":"architecture/#parallel-processing","title":"Parallel Processing","text":"<p>pysearch uses multiple levels of parallelization:</p> <ol> <li>File-level Parallelism: Process multiple files concurrently</li> <li>Matcher Parallelism: Run different matchers in parallel</li> <li>I/O Parallelism: Overlap disk I/O with processing</li> <li>Pipeline Parallelism: Stream processing through pipeline stages</li> </ol>"},{"location":"architecture/#memory-management","title":"Memory Management","text":"<p>Strategies:</p> <ul> <li>Lazy Loading: Load file content only when needed</li> <li>Streaming: Process large files in chunks</li> <li>Memory Pools: Reuse memory allocations</li> <li>Garbage Collection: Explicit cleanup of large objects</li> </ul> <p>Memory Limits:</p> <ul> <li>File size limits to prevent memory exhaustion</li> <li>Result set size limits for large searches</li> <li>Cache size limits with LRU eviction</li> <li>Worker process memory monitoring</li> </ul>"},{"location":"architecture/#caching-strategy","title":"Caching Strategy","text":"<p>Multi-level Caching:</p> <ol> <li>In-Memory Cache: Hot data in RAM</li> <li>Disk Cache: Persistent cache across sessions</li> <li>Index Cache: File metadata and structure</li> <li>Result Cache: Cached search results</li> </ol> <p>Cache Policies:</p> <ul> <li>TTL-based: Time-based expiration</li> <li>LRU: Least recently used eviction</li> <li>Size-based: Maximum cache size limits</li> <li>Dependency-based: Invalidate on file changes</li> </ul>"},{"location":"architecture/#io-optimization","title":"I/O Optimization","text":"<p>Techniques:</p> <ul> <li>Memory Mapping: For large file access</li> <li>Batch I/O: Group small operations</li> <li>Async I/O: Non-blocking file operations</li> <li>Read-ahead: Predictive file loading</li> </ul>"},{"location":"architecture/#extension-points","title":"Extension Points","text":""},{"location":"architecture/#plugin-architecture","title":"Plugin Architecture","text":"<p>pysearch supports extensions through well-defined interfaces:</p>"},{"location":"architecture/#matcher-plugins","title":"Matcher Plugins","text":"<pre><code>class CustomMatcher(BaseMatcher):\n    def match(self, content: str, query: Query) -&gt; list[Match]:\n        # Custom matching logic\n        pass\n</code></pre>"},{"location":"architecture/#formatter-plugins","title":"Formatter Plugins","text":"<pre><code>class CustomFormatter(BaseFormatter):\n    def format(self, results: SearchResult) -&gt; str:\n        # Custom formatting logic\n        pass\n</code></pre>"},{"location":"architecture/#scorer-plugins","title":"Scorer Plugins","text":"<pre><code>class CustomScorer(BaseScorer):\n    def score(self, items: list[SearchItem]) -&gt; list[SearchItem]:\n        # Custom scoring logic\n        pass\n</code></pre>"},{"location":"architecture/#configuration-extensions","title":"Configuration Extensions","text":"<p>New configuration options can be added through:</p> <ul> <li>Field Extensions: Add new fields to <code>SearchConfig</code></li> <li>Validation Hooks: Custom validation logic</li> <li>Environment Integration: New environment variables</li> <li>File Format Support: Additional config file formats</li> </ul>"},{"location":"architecture/#language-support","title":"Language Support","text":"<p>Adding new programming languages:</p> <ol> <li>Extension Mapping: Map file extensions to languages</li> <li>Syntax Highlighting: Add syntax highlighting rules</li> <li>AST Support: Implement language-specific AST parsing</li> <li>Special Handling: Language-specific processing rules</li> </ol>"},{"location":"architecture/#design-principles","title":"Design Principles","text":""},{"location":"architecture/#solid-principles","title":"SOLID Principles","text":"<ol> <li>Single Responsibility: Each component has one clear purpose</li> <li>Open/Closed: Open for extension, closed for modification</li> <li>Liskov Substitution: Interfaces are properly substitutable</li> <li>Interface Segregation: Small, focused interfaces</li> <li>Dependency Inversion: Depend on abstractions, not concretions</li> </ol>"},{"location":"architecture/#performance-principles","title":"Performance Principles","text":"<ol> <li>Lazy Evaluation: Compute only what's needed</li> <li>Caching: Cache expensive operations</li> <li>Parallelization: Utilize multiple cores effectively</li> <li>Memory Efficiency: Minimize memory allocation and copying</li> <li>I/O Optimization: Minimize and optimize disk access</li> </ol>"},{"location":"architecture/#reliability-principles","title":"Reliability Principles","text":"<ol> <li>Graceful Degradation: Continue working with partial failures</li> <li>Error Isolation: Contain errors to prevent cascading failures</li> <li>Resource Management: Proper cleanup and resource handling</li> <li>Defensive Programming: Validate inputs and handle edge cases</li> <li>Monitoring: Comprehensive logging and metrics</li> </ol>"},{"location":"architecture/#future-architecture","title":"Future Architecture","text":""},{"location":"architecture/#planned-enhancements","title":"Planned Enhancements","text":""},{"location":"architecture/#distributed-architecture","title":"Distributed Architecture","text":"<ul> <li>Multi-node Processing: Distribute search across multiple machines</li> <li>Shared Caching: Distributed cache for team environments</li> <li>Load Balancing: Distribute search load efficiently</li> <li>Fault Tolerance: Handle node failures gracefully</li> </ul>"},{"location":"architecture/#advanced-semantic-search","title":"Advanced Semantic Search","text":"<ul> <li>External Embeddings: Support for transformer models</li> <li>Vector Databases: Integration with vector storage systems</li> <li>Semantic Indexing: Pre-computed semantic indices</li> <li>Context-aware Search: Understanding code context and intent</li> </ul>"},{"location":"architecture/#real-time-features","title":"Real-time Features","text":"<ul> <li>Live Indexing: Real-time index updates</li> <li>Streaming Results: Live result streaming</li> <li>Interactive Search: Dynamic query refinement</li> <li>Collaborative Features: Team search and sharing</li> </ul>"},{"location":"architecture/#ide-integration","title":"IDE Integration","text":"<ul> <li>Language Server Protocol: LSP-based IDE integration</li> <li>Editor Plugins: Native editor extensions</li> <li>Code Navigation: Jump-to-definition and references</li> <li>Refactoring Support: Search-based refactoring tools</li> </ul>"},{"location":"architecture/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Microservices: Break into smaller services</li> <li>API Gateway: Centralized API management</li> <li>Service Mesh: Inter-service communication</li> <li>Container Orchestration: Kubernetes deployment</li> </ul>"},{"location":"architecture/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>Memory Optimization: Reduce memory footprint</li> <li>CPU Optimization: Better CPU utilization</li> <li>I/O Optimization: Faster disk and network I/O</li> <li>Algorithm Improvements: More efficient algorithms</li> </ul>"},{"location":"architecture/#technology-evolution","title":"Technology Evolution","text":""},{"location":"architecture/#language-support_1","title":"Language Support","text":"<ul> <li>Multi-language AST: Support for more programming languages</li> <li>Cross-language Search: Search across language boundaries</li> <li>Language-specific Features: Leverage language-specific tools</li> <li>Polyglot Repositories: Better support for mixed-language projects</li> </ul>"},{"location":"architecture/#machine-learning-integration","title":"Machine Learning Integration","text":"<ul> <li>Learning to Rank: ML-based result ranking</li> <li>Query Understanding: Natural language query processing</li> <li>Code Understanding: Deep code comprehension</li> <li>Personalization: User-specific search optimization</li> </ul>"},{"location":"architecture/#contributing-to-architecture","title":"Contributing to Architecture","text":""},{"location":"architecture/#architecture-guidelines","title":"Architecture Guidelines","text":"<ol> <li>Document Decisions: Use Architecture Decision Records (ADRs)</li> <li>Design Reviews: Peer review of architectural changes</li> <li>Performance Testing: Benchmark architectural changes</li> <li>Backward Compatibility: Maintain API compatibility</li> <li>Migration Paths: Provide clear upgrade paths</li> </ol>"},{"location":"architecture/#code-organization","title":"Code Organization","text":"<ol> <li>Module Boundaries: Respect module responsibilities</li> <li>Interface Design: Design clean, minimal interfaces</li> <li>Error Handling: Consistent error handling patterns</li> <li>Testing Strategy: Comprehensive test coverage</li> <li>Documentation: Keep architecture docs updated</li> </ol>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Profiling: Profile before optimizing</li> <li>Benchmarking: Establish performance baselines</li> <li>Monitoring: Add metrics for new components</li> <li>Resource Usage: Monitor memory and CPU usage</li> <li>Scalability Testing: Test with large datasets</li> </ol>"},{"location":"architecture/#see-also","title":"See Also","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>Usage Guide - How to use pysearch effectively</li> <li>API Reference - Complete API documentation</li> <li>Contributing Guide - How to contribute to the project</li> </ul>"},{"location":"cli-reference/","title":"CLI Reference","text":"<p>Complete command-line interface reference for pysearch.</p>"},{"location":"cli-reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Global Options</li> <li>Commands</li> <li>Search Options</li> <li>Output Options</li> <li>Filter Options</li> <li>Performance Options</li> <li>Examples</li> <li>Exit Codes</li> </ul>"},{"location":"cli-reference/#overview","title":"Overview","text":"<p>The pysearch command-line interface provides powerful search capabilities with extensive configuration options.</p>"},{"location":"cli-reference/#basic-syntax","title":"Basic Syntax","text":"<pre><code>pysearch [GLOBAL_OPTIONS] COMMAND [COMMAND_OPTIONS]\n</code></pre>"},{"location":"cli-reference/#quick-examples","title":"Quick Examples","text":"<pre><code># Basic search\npysearch find --pattern \"def main\" --path ./src\n\n# Regex search with context\npysearch find --pattern \"def.*handler\" --regex --context 5\n\n# AST search with filters\npysearch find --pattern \"def\" --ast --filter-func-name \"test_.*\"\n\n# JSON output for automation\npysearch find --pattern \"TODO\" --format json --output results.json\n</code></pre>"},{"location":"cli-reference/#global-options","title":"Global Options","text":"<p>Options that apply to all commands.</p>"},{"location":"cli-reference/#-version","title":"<code>--version</code>","text":"<p>Show version information and exit.</p> <pre><code>pysearch --version\n</code></pre>"},{"location":"cli-reference/#-help","title":"<code>--help</code>","text":"<p>Show help message and exit.</p> <pre><code>pysearch --help\npysearch find --help  # Command-specific help\n</code></pre>"},{"location":"cli-reference/#-config-file","title":"<code>--config FILE</code>","text":"<p>Use specific configuration file.</p> <pre><code>pysearch --config ./custom-config.toml find --pattern \"pattern\"\n</code></pre>"},{"location":"cli-reference/#-verbose-v","title":"<code>--verbose</code>, <code>-v</code>","text":"<p>Enable verbose output. Can be repeated for more verbosity.</p> <pre><code>pysearch -v find --pattern \"pattern\"      # Verbose\npysearch -vv find --pattern \"pattern\"     # Very verbose\npysearch -vvv find --pattern \"pattern\"    # Debug level\n</code></pre>"},{"location":"cli-reference/#-quiet-q","title":"<code>--quiet</code>, <code>-q</code>","text":"<p>Suppress non-essential output.</p> <pre><code>pysearch -q find --pattern \"pattern\"\n</code></pre>"},{"location":"cli-reference/#commands","title":"Commands","text":""},{"location":"cli-reference/#find","title":"<code>find</code>","text":"<p>Primary search command. Searches for patterns in files.</p> <pre><code>pysearch find [OPTIONS] --pattern PATTERN\n</code></pre> <p>Required:</p> <ul> <li><code>--pattern PATTERN</code>: Search pattern (text or regex)</li> </ul> <p>Basic Options:</p> <ul> <li><code>--path PATH</code>: Search path (can be repeated)</li> <li><code>--include PATTERN</code>: Include file pattern (can be repeated)</li> <li><code>--exclude PATTERN</code>: Exclude file pattern (can be repeated)</li> </ul>"},{"location":"cli-reference/#config","title":"<code>config</code>","text":"<p>Configuration management commands.</p> <pre><code># Show current configuration\npysearch config show\n\n# Validate configuration file\npysearch config validate --file config.toml\n\n# Generate example configuration\npysearch config example &gt; pysearch.toml\n</code></pre>"},{"location":"cli-reference/#cache","title":"<code>cache</code>","text":"<p>Cache management commands.</p> <pre><code># Show cache status\npysearch cache status\n\n# Clear cache\npysearch cache clear\n\n# Show cache statistics\npysearch cache stats\n</code></pre>"},{"location":"cli-reference/#search-options","title":"Search Options","text":""},{"location":"cli-reference/#pattern-options","title":"Pattern Options","text":""},{"location":"cli-reference/#-pattern-pattern","title":"<code>--pattern PATTERN</code>","text":"<p>Required. The search pattern.</p> <pre><code>pysearch find --pattern \"def main\"\npysearch find --pattern \"TODO|FIXME\"  # With --regex\n</code></pre>"},{"location":"cli-reference/#-regex-r","title":"<code>--regex</code>, <code>-r</code>","text":"<p>Enable regular expression matching.</p> <pre><code>pysearch find --pattern \"def \\w+_handler\" --regex\n</code></pre>"},{"location":"cli-reference/#-case-sensitive","title":"<code>--case-sensitive</code>","text":"<p>Enable case-sensitive matching (default: case-insensitive).</p> <pre><code>pysearch find --pattern \"Class\" --case-sensitive\n</code></pre>"},{"location":"cli-reference/#search-type-options","title":"Search Type Options","text":""},{"location":"cli-reference/#-ast","title":"<code>--ast</code>","text":"<p>Enable AST (Abstract Syntax Tree) search for code structure.</p> <pre><code>pysearch find --pattern \"def\" --ast --filter-func-name \"test_.*\"\n</code></pre>"},{"location":"cli-reference/#-semantic","title":"<code>--semantic</code>","text":"<p>Enable semantic search for conceptual matching.</p> <pre><code>pysearch find --pattern \"error handling\" --semantic\n</code></pre>"},{"location":"cli-reference/#scope-options","title":"Scope Options","text":""},{"location":"cli-reference/#-path-path","title":"<code>--path PATH</code>","text":"<p>Search path. Can be specified multiple times.</p> <pre><code>pysearch find --pattern \"pattern\" --path ./src --path ./tests\n</code></pre>"},{"location":"cli-reference/#-include-pattern","title":"<code>--include PATTERN</code>","text":"<p>Include files matching glob pattern. Can be repeated.</p> <pre><code>pysearch find --pattern \"pattern\" --include \"**/*.py\" --include \"**/*.pyx\"\n</code></pre>"},{"location":"cli-reference/#-exclude-pattern","title":"<code>--exclude PATTERN</code>","text":"<p>Exclude files matching glob pattern. Can be repeated.</p> <pre><code>pysearch find --pattern \"pattern\" --exclude \"**/.venv/**\" --exclude \"**/.git/**\"\n</code></pre>"},{"location":"cli-reference/#-language-lang","title":"<code>--language LANG</code>","text":"<p>Limit search to specific programming languages.</p> <pre><code>pysearch find --pattern \"pattern\" --language python --language javascript\n</code></pre>"},{"location":"cli-reference/#-max-file-size-size","title":"<code>--max-file-size SIZE</code>","text":"<p>Maximum file size to search (in bytes).</p> <pre><code>pysearch find --pattern \"pattern\" --max-file-size 1048576  # 1MB\n</code></pre>"},{"location":"cli-reference/#output-options","title":"Output Options","text":""},{"location":"cli-reference/#format-options","title":"Format Options","text":""},{"location":"cli-reference/#-format-format","title":"<code>--format FORMAT</code>","text":"<p>Output format. Options: <code>text</code>, <code>json</code>, <code>highlight</code>.</p> <pre><code>pysearch find --pattern \"pattern\" --format json\npysearch find --pattern \"pattern\" --format highlight  # Syntax highlighting\n</code></pre>"},{"location":"cli-reference/#-output-file-o-file","title":"<code>--output FILE</code>, <code>-o FILE</code>","text":"<p>Write output to file instead of stdout.</p> <pre><code>pysearch find --pattern \"pattern\" --format json --output results.json\n</code></pre>"},{"location":"cli-reference/#context-options","title":"Context Options","text":""},{"location":"cli-reference/#-context-lines-c-lines","title":"<code>--context LINES</code>, <code>-C LINES</code>","text":"<p>Number of context lines around matches.</p> <pre><code>pysearch find --pattern \"pattern\" --context 5\n</code></pre>"},{"location":"cli-reference/#-before-context-lines-b-lines","title":"<code>--before-context LINES</code>, <code>-B LINES</code>","text":"<p>Number of lines before matches.</p> <pre><code>pysearch find --pattern \"pattern\" --before-context 3\n</code></pre>"},{"location":"cli-reference/#-after-context-lines-a-lines","title":"<code>--after-context LINES</code>, <code>-A LINES</code>","text":"<p>Number of lines after matches.</p> <pre><code>pysearch find --pattern \"pattern\" --after-context 3\n</code></pre>"},{"location":"cli-reference/#limit-options","title":"Limit Options","text":""},{"location":"cli-reference/#-max-results-count","title":"<code>--max-results COUNT</code>","text":"<p>Maximum number of results to return.</p> <pre><code>pysearch find --pattern \"pattern\" --max-results 100\n</code></pre>"},{"location":"cli-reference/#-max-files-count","title":"<code>--max-files COUNT</code>","text":"<p>Maximum number of files to search.</p> <pre><code>pysearch find --pattern \"pattern\" --max-files 1000\n</code></pre>"},{"location":"cli-reference/#filter-options","title":"Filter Options","text":""},{"location":"cli-reference/#ast-filters","title":"AST Filters","text":"<p>Used with <code>--ast</code> flag to filter by code structure.</p>"},{"location":"cli-reference/#-filter-func-name-pattern","title":"<code>--filter-func-name PATTERN</code>","text":"<p>Filter functions by name pattern (regex).</p> <pre><code>pysearch find --pattern \"def\" --ast --filter-func-name \"test_.*\"\n</code></pre>"},{"location":"cli-reference/#-filter-class-name-pattern","title":"<code>--filter-class-name PATTERN</code>","text":"<p>Filter classes by name pattern (regex).</p> <pre><code>pysearch find --pattern \"class\" --ast --filter-class-name \".*Manager\"\n</code></pre>"},{"location":"cli-reference/#-filter-decorator-pattern","title":"<code>--filter-decorator PATTERN</code>","text":"<p>Filter by decorator pattern (regex).</p> <pre><code>pysearch find --pattern \"@\" --ast --filter-decorator \"lru_cache\"\n</code></pre>"},{"location":"cli-reference/#-filter-import-pattern","title":"<code>--filter-import PATTERN</code>","text":"<p>Filter by import pattern (regex).</p> <pre><code>pysearch find --pattern \"import\" --ast --filter-import \"requests.*\"\n</code></pre>"},{"location":"cli-reference/#content-filters","title":"Content Filters","text":""},{"location":"cli-reference/#-no-docstrings","title":"<code>--no-docstrings</code>","text":"<p>Skip searching in docstrings.</p> <pre><code>pysearch find --pattern \"pattern\" --no-docstrings\n</code></pre>"},{"location":"cli-reference/#-no-comments","title":"<code>--no-comments</code>","text":"<p>Skip searching in comments.</p> <pre><code>pysearch find --pattern \"pattern\" --no-comments\n</code></pre>"},{"location":"cli-reference/#-no-strings","title":"<code>--no-strings</code>","text":"<p>Skip searching in string literals.</p> <pre><code>pysearch find --pattern \"pattern\" --no-strings\n</code></pre>"},{"location":"cli-reference/#-docstrings-only","title":"<code>--docstrings-only</code>","text":"<p>Search only in docstrings.</p> <pre><code>pysearch find --pattern \"pattern\" --docstrings-only\n</code></pre>"},{"location":"cli-reference/#-comments-only","title":"<code>--comments-only</code>","text":"<p>Search only in comments.</p> <pre><code>pysearch find --pattern \"pattern\" --comments-only\n</code></pre>"},{"location":"cli-reference/#performance-options","title":"Performance Options","text":""},{"location":"cli-reference/#parallel-processing","title":"Parallel Processing","text":""},{"location":"cli-reference/#-parallel","title":"<code>--parallel</code>","text":"<p>Enable parallel processing (default: enabled).</p> <pre><code>pysearch find --pattern \"pattern\" --parallel\n</code></pre>"},{"location":"cli-reference/#-no-parallel","title":"<code>--no-parallel</code>","text":"<p>Disable parallel processing.</p> <pre><code>pysearch find --pattern \"pattern\" --no-parallel\n</code></pre>"},{"location":"cli-reference/#-workers-count","title":"<code>--workers COUNT</code>","text":"<p>Number of worker threads (0 = auto-detect).</p> <pre><code>pysearch find --pattern \"pattern\" --workers 8\n</code></pre>"},{"location":"cli-reference/#caching","title":"Caching","text":""},{"location":"cli-reference/#-cache","title":"<code>--cache</code>","text":"<p>Enable result caching.</p> <pre><code>pysearch find --pattern \"pattern\" --cache\n</code></pre>"},{"location":"cli-reference/#-no-cache","title":"<code>--no-cache</code>","text":"<p>Disable result caching.</p> <pre><code>pysearch find --pattern \"pattern\" --no-cache\n</code></pre>"},{"location":"cli-reference/#-cache-ttl-seconds","title":"<code>--cache-ttl SECONDS</code>","text":"<p>Cache time-to-live in seconds.</p> <pre><code>pysearch find --pattern \"pattern\" --cache --cache-ttl 3600  # 1 hour\n</code></pre>"},{"location":"cli-reference/#memory-management","title":"Memory Management","text":""},{"location":"cli-reference/#-strict-hash-check","title":"<code>--strict-hash-check</code>","text":"<p>Enable strict file change detection (slower but more accurate).</p> <pre><code>pysearch find --pattern \"pattern\" --strict-hash-check\n</code></pre>"},{"location":"cli-reference/#-no-dir-prune","title":"<code>--no-dir-prune</code>","text":"<p>Disable directory pruning optimization.</p> <pre><code>pysearch find --pattern \"pattern\" --no-dir-prune\n</code></pre>"},{"location":"cli-reference/#examples","title":"Examples","text":""},{"location":"cli-reference/#basic-usage","title":"Basic Usage","text":"<pre><code># Simple text search\npysearch find --pattern \"TODO\" --path ./src\n\n# Search in multiple directories\npysearch find --pattern \"def main\" --path ./src --path ./tests\n\n# Search specific file types\npysearch find --pattern \"import requests\" --include \"**/*.py\"\n</code></pre>"},{"location":"cli-reference/#advanced-searches","title":"Advanced Searches","text":"<pre><code># Regex search for function patterns\npysearch find --pattern \"def test_\\w+\" --regex --path ./tests\n\n# AST search for async functions\npysearch find --pattern \"async def\" --ast --filter-func-name \".*handler\"\n\n# Semantic search for concepts\npysearch find --pattern \"error handling\" --semantic --path ./src\n</code></pre>"},{"location":"cli-reference/#output-formatting","title":"Output Formatting","text":"<pre><code># JSON output for automation\npysearch find --pattern \"TODO\" --format json --output todos.json\n\n# Highlighted output for terminal\npysearch find --pattern \"class.*Test\" --regex --format highlight\n\n# Minimal output with no context\npysearch find --pattern \"import\" --context 0 --quiet\n</code></pre>"},{"location":"cli-reference/#performance-optimization","title":"Performance Optimization","text":"<pre><code># High-performance search\npysearch find --pattern \"pattern\" \\\n  --parallel --workers 8 \\\n  --cache --cache-ttl 3600 \\\n  --exclude \"**/.venv/**\" \"**/.git/**\" \\\n  --max-file-size 1048576\n\n# Memory-efficient search\npysearch find --pattern \"pattern\" \\\n  --workers 2 \\\n  --context 1 \\\n  --max-results 100 \\\n  --no-docstrings --no-comments\n</code></pre>"},{"location":"cli-reference/#complex-filtering","title":"Complex Filtering","text":"<pre><code># Find test functions with specific decorators\npysearch find --pattern \"def\" --ast \\\n  --filter-func-name \"test_.*\" \\\n  --filter-decorator \"pytest\\.mark\\.(parametrize|skip)\" \\\n  --path ./tests\n\n# Find classes with specific imports\npysearch find --pattern \"class\" --ast \\\n  --filter-class-name \".*Manager\" \\\n  --filter-import \"from.*import.*Manager\" \\\n  --path ./src\n</code></pre>"},{"location":"cli-reference/#exit-codes","title":"Exit Codes","text":"<p>pysearch uses standard exit codes:</p> Code Meaning 0 Success - matches found 1 No matches found 2 Error in command line arguments 3 File access error 4 Configuration error 5 Search error 6 Output error"},{"location":"cli-reference/#examples_1","title":"Examples","text":"<pre><code># Check if pattern exists (exit code 0 = found, 1 = not found)\npysearch find --pattern \"TODO\" --quiet\necho $?  # 0 if found, 1 if not found\n\n# Use in scripts\nif pysearch find --pattern \"deprecated\" --quiet; then\n    echo \"Found deprecated code\"\nelse\n    echo \"No deprecated code found\"\nfi\n</code></pre>"},{"location":"cli-reference/#environment-variables","title":"Environment Variables","text":"<p>CLI options can be set via environment variables:</p> Variable Option Example <code>PYSEARCH_PATHS</code> <code>--path</code> <code>export PYSEARCH_PATHS=\"./src:./tests\"</code> <code>PYSEARCH_INCLUDE</code> <code>--include</code> <code>export PYSEARCH_INCLUDE=\"**/*.py\"</code> <code>PYSEARCH_EXCLUDE</code> <code>--exclude</code> <code>export PYSEARCH_EXCLUDE=\"**/.venv/**\"</code> <code>PYSEARCH_CONTEXT</code> <code>--context</code> <code>export PYSEARCH_CONTEXT=\"5\"</code> <code>PYSEARCH_FORMAT</code> <code>--format</code> <code>export PYSEARCH_FORMAT=\"json\"</code> <code>PYSEARCH_PARALLEL</code> <code>--parallel</code> <code>export PYSEARCH_PARALLEL=\"true\"</code> <code>PYSEARCH_WORKERS</code> <code>--workers</code> <code>export PYSEARCH_WORKERS=\"8\"</code> <code>PYSEARCH_CACHE</code> <code>--cache</code> <code>export PYSEARCH_CACHE=\"true\"</code>"},{"location":"cli-reference/#priority-order","title":"Priority Order","text":"<p>Settings are applied in this order (later overrides earlier):</p> <ol> <li>Default values</li> <li>Configuration file</li> <li>Environment variables</li> <li>Command line arguments</li> </ol>"},{"location":"cli-reference/#configuration-files","title":"Configuration Files","text":"<p>CLI can use configuration files to set default options:</p> <pre><code># pysearch.toml\n[search]\npaths = [\"./src\", \"./tests\"]\ninclude = [\"**/*.py\"]\nexclude = [\"**/.venv/**\", \"**/.git/**\"]\ncontext = 3\nparallel = true\nworkers = 4\n\n[output]\nformat = \"text\"\n\n[performance]\ncache = true\ncache_ttl = 3600\nstrict_hash_check = false\n</code></pre> <p>Use with:</p> <pre><code>pysearch --config pysearch.toml find --pattern \"pattern\"\n</code></pre>"},{"location":"cli-reference/#shell-integration","title":"Shell Integration","text":""},{"location":"cli-reference/#bash-completion","title":"Bash Completion","text":"<p>Add to your <code>.bashrc</code>:</p> <pre><code>eval \"$(pysearch completion bash)\"\n</code></pre>"},{"location":"cli-reference/#zsh-completion","title":"Zsh Completion","text":"<p>Add to your <code>.zshrc</code>:</p> <pre><code>eval \"$(pysearch completion zsh)\"\n</code></pre>"},{"location":"cli-reference/#fish-completion","title":"Fish Completion","text":"<pre><code>pysearch completion fish | source\n</code></pre>"},{"location":"cli-reference/#see-also","title":"See Also","text":"<ul> <li>Usage Guide - Comprehensive usage documentation</li> <li>Configuration Guide - Configuration options</li> <li>API Reference - Python API documentation</li> <li>Examples - Practical examples</li> </ul>"},{"location":"configuration/","title":"Configuration Guide","text":"<p>This comprehensive guide covers all configuration options for pysearch, from basic setup to advanced performance tuning.</p>"},{"location":"configuration/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Basic Configuration</li> <li>Search Scope Configuration</li> <li>Performance Configuration</li> <li>Content Filtering</li> <li>Output Configuration</li> <li>Advanced Options</li> <li>Configuration Files</li> <li>Environment Variables</li> <li>Best Practices</li> </ul>"},{"location":"configuration/#overview","title":"Overview","text":"<p>pysearch uses the <code>SearchConfig</code> class for all configuration management. Configuration can be set through:</p> <ul> <li>Python API: Direct instantiation of <code>SearchConfig</code></li> <li>CLI parameters: Command-line arguments</li> <li>Configuration files: TOML configuration files</li> <li>Environment variables: Environment-based settings</li> </ul>"},{"location":"configuration/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>Settings are applied in this order (later overrides earlier):</p> <ol> <li>Default values</li> <li>Configuration file settings</li> <li>Environment variables</li> <li>CLI parameters</li> <li>API parameters</li> </ol>"},{"location":"configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"configuration/#minimal-setup","title":"Minimal Setup","text":"<pre><code>from pysearch import PySearch, SearchConfig\n\n# Minimal configuration\nconfig = SearchConfig()\nengine = PySearch(config)\n\n# Search current directory for Python files\nresults = engine.search(\"def main\")\n</code></pre>"},{"location":"configuration/#common-setup","title":"Common Setup","text":"<pre><code>from pysearch.config import SearchConfig\nfrom pysearch.types import OutputFormat\n\nconfig = SearchConfig(\n    paths=[\"./src\", \"./tests\"],           # Search paths\n    include=[\"**/*.py\"],                  # Include patterns\n    exclude=[\"**/.venv/**\", \"**/.git/**\"], # Exclude patterns\n    context=3,                            # Context lines\n    output_format=OutputFormat.JSON,      # Output format\n    parallel=True,                        # Enable parallel processing\n    workers=4                             # Number of workers\n)\n</code></pre>"},{"location":"configuration/#search-scope-configuration","title":"Search Scope Configuration","text":""},{"location":"configuration/#paths","title":"Paths","text":"<p>Define which directories to search.</p> <pre><code>config = SearchConfig(\n    paths=[\n        \"./src\",           # Source code\n        \"./tests\",         # Test files\n        \"./docs\",          # Documentation\n        \"../shared-lib\"    # External library\n    ]\n)\n</code></pre> <p>CLI equivalent:</p> <pre><code>pysearch find --path ./src --path ./tests --path ./docs --pattern \"pattern\"\n</code></pre>"},{"location":"configuration/#include-patterns","title":"Include Patterns","text":"<p>Specify which files to include using glob patterns.</p> <pre><code>config = SearchConfig(\n    include=[\n        \"**/*.py\",         # Python files\n        \"**/*.pyx\",        # Cython files\n        \"**/*.pyi\",        # Type stub files\n        \"**/Dockerfile\",   # Docker files\n        \"**/Makefile\"      # Make files\n    ]\n)\n</code></pre> <p>Auto-detection: If <code>include</code> is <code>None</code>, pysearch automatically detects patterns based on supported languages.</p>"},{"location":"configuration/#exclude-patterns","title":"Exclude Patterns","text":"<p>Specify which files/directories to exclude.</p> <pre><code>config = SearchConfig(\n    exclude=[\n        \"**/.venv/**\",         # Virtual environments\n        \"**/.git/**\",          # Git directories\n        \"**/node_modules/**\",  # Node.js modules\n        \"**/__pycache__/**\",   # Python cache\n        \"**/build/**\",         # Build artifacts\n        \"**/dist/**\",          # Distribution files\n        \"**/.pytest_cache/**\", # Pytest cache\n        \"**/htmlcov/**\"        # Coverage reports\n    ]\n)\n</code></pre> <p>Default exclusions: If <code>exclude</code> is <code>None</code>, sensible defaults are applied automatically.</p>"},{"location":"configuration/#language-filtering","title":"Language Filtering","text":"<p>Limit search to specific programming languages.</p> <pre><code>from pysearch.types import Language\n\nconfig = SearchConfig(\n    languages={\n        Language.PYTHON,\n        Language.JAVASCRIPT,\n        Language.TYPESCRIPT\n    }\n)\n</code></pre> <p>Supported languages:</p> <ul> <li>Python (.py, .pyx, .pyi)</li> <li>JavaScript (.js, .jsx, .mjs)</li> <li>TypeScript (.ts, .tsx)</li> <li>Java (.java)</li> <li>C/C++ (.c, .cpp, .h, .hpp)</li> <li>Rust (.rs)</li> <li>Go (.go)</li> <li>And more...</li> </ul>"},{"location":"configuration/#file-size-limits","title":"File Size Limits","text":"<p>Control which files are processed based on size.</p> <pre><code>config = SearchConfig(\n    file_size_limit=2_000_000,  # 2MB limit\n    max_file_bytes=2_000_000    # Backup limit (deprecated)\n)\n</code></pre>"},{"location":"configuration/#performance-configuration","title":"Performance Configuration","text":""},{"location":"configuration/#parallel-processing","title":"Parallel Processing","text":"<p>Enable multi-threaded search for better performance.</p> <pre><code>config = SearchConfig(\n    parallel=True,      # Enable parallel processing\n    workers=8,          # Number of worker threads (0 = auto)\n)\n</code></pre> <p>Auto-detection: Setting <code>workers=0</code> automatically uses <code>cpu_count()</code>.</p>"},{"location":"configuration/#caching-configuration","title":"Caching Configuration","text":"<p>Configure file content and index caching.</p> <pre><code>from pathlib import Path\n\nconfig = SearchConfig(\n    cache_dir=Path(\"./custom-cache\"),  # Custom cache directory\n    # Default: .pysearch-cache under first search path\n)\n\n# Enable caching in engine\nengine = PySearch(config)\nengine.enable_caching(ttl=3600)  # 1 hour cache\n</code></pre>"},{"location":"configuration/#hash-verification","title":"Hash Verification","text":"<p>Control file change detection precision.</p> <pre><code>config = SearchConfig(\n    strict_hash_check=False  # Default: False for performance\n)\n</code></pre> <p>Options:</p> <ul> <li><code>True</code>: Compute SHA1 hash for precise change detection (slower)</li> <li><code>False</code>: Use size/mtime only for change detection (faster)</li> </ul>"},{"location":"configuration/#directory-pruning","title":"Directory Pruning","text":"<p>Optimize directory traversal by skipping excluded directories.</p> <pre><code>config = SearchConfig(\n    dir_prune_exclude=True  # Default: True\n)\n</code></pre> <p>Options:</p> <ul> <li><code>True</code>: Skip excluded directories during traversal (faster)</li> <li><code>False</code>: Check all files individually (slower but same results)</li> </ul>"},{"location":"configuration/#content-filtering","title":"Content Filtering","text":""},{"location":"configuration/#content-type-toggles","title":"Content Type Toggles","text":"<p>Control which parts of files to search.</p> <pre><code>config = SearchConfig(\n    enable_docstrings=True,   # Search in docstrings\n    enable_comments=True,     # Search in comments\n    enable_strings=True       # Search in string literals\n)\n</code></pre> <p>Use cases:</p> <ul> <li>Code-only search: <code>enable_docstrings=False, enable_comments=False</code></li> <li>Documentation search: <code>enable_docstrings=True, enable_comments=False, enable_strings=False</code></li> <li>Full-text search: All enabled (default)</li> </ul>"},{"location":"configuration/#symlink-handling","title":"Symlink Handling","text":"<p>Control whether to follow symbolic links.</p> <pre><code>config = SearchConfig(\n    follow_symlinks=False  # Default: False for security\n)\n</code></pre> <p>Security note: Following symlinks can lead to infinite loops or access to unintended files.</p>"},{"location":"configuration/#output-configuration","title":"Output Configuration","text":""},{"location":"configuration/#output-format","title":"Output Format","text":"<p>Choose the output format for results.</p> <pre><code>from pysearch.types import OutputFormat\n\nconfig = SearchConfig(\n    output_format=OutputFormat.JSON  # JSON, TEXT, or HIGHLIGHT\n)\n</code></pre> <p>Formats:</p> <ul> <li><code>TEXT</code>: Human-readable plain text</li> <li><code>JSON</code>: Machine-readable structured data</li> <li><code>HIGHLIGHT</code>: Terminal with syntax highlighting</li> </ul>"},{"location":"configuration/#context-lines","title":"Context Lines","text":"<p>Control how many lines of context to show around matches.</p> <pre><code>config = SearchConfig(\n    context=5  # Show 5 lines before and after each match\n)\n</code></pre> <p>Performance impact: More context lines increase memory usage and output size.</p>"},{"location":"configuration/#ranking-configuration","title":"Ranking Configuration","text":"<p>Configure result scoring and ranking.</p> <pre><code>from pysearch.config import RankStrategy\n\nconfig = SearchConfig(\n    rank_strategy=RankStrategy.DEFAULT,\n    ast_weight=2.0,    # Boost AST matches\n    text_weight=1.0    # Standard text matches\n)\n</code></pre>"},{"location":"configuration/#advanced-options","title":"Advanced Options","text":""},{"location":"configuration/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>from pysearch.config import SearchConfig, RankStrategy\nfrom pysearch.types import OutputFormat, Language\nfrom pathlib import Path\n\nconfig = SearchConfig(\n    # Search scope\n    paths=[\"./src\", \"./tests\", \"./docs\"],\n    include=[\"**/*.py\", \"**/*.pyx\", \"**/*.md\"],\n    exclude=[\n        \"**/.venv/**\",\n        \"**/.git/**\",\n        \"**/build/**\",\n        \"**/__pycache__/**\"\n    ],\n    languages={Language.PYTHON},\n\n    # Behavior\n    context=3,\n    output_format=OutputFormat.JSON,\n    follow_symlinks=False,\n    file_size_limit=5_000_000,  # 5MB\n\n    # Content filtering\n    enable_docstrings=True,\n    enable_comments=False,\n    enable_strings=True,\n\n    # Performance\n    parallel=True,\n    workers=6,\n    cache_dir=Path(\"./custom-cache\"),\n    strict_hash_check=False,\n    dir_prune_exclude=True,\n\n    # Ranking\n    rank_strategy=RankStrategy.DEFAULT,\n    ast_weight=2.5,\n    text_weight=1.0\n)\n</code></pre>"},{"location":"configuration/#dynamic-configuration","title":"Dynamic Configuration","text":"<p>Modify configuration after creation:</p> <pre><code>config = SearchConfig()\n\n# Adjust for development\nconfig.parallel = True\nconfig.workers = 8\nconfig.enable_comments = False\n\n# Adjust for production\nif production_mode:\n    config.strict_hash_check = True\n    config.file_size_limit = 1_000_000\n</code></pre>"},{"location":"configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"configuration/#toml-configuration","title":"TOML Configuration","text":"<p>Create a <code>pysearch.toml</code> file:</p> <pre><code># pysearch.toml\n[search]\npaths = [\"./src\", \"./tests\"]\ninclude = [\"**/*.py\", \"**/*.pyx\"]\nexclude = [\"**/.venv/**\", \"**/.git/**\", \"**/__pycache__/**\"]\ncontext = 3\nparallel = true\nworkers = 4\n\n[content]\nenable_docstrings = true\nenable_comments = false\nenable_strings = true\n\n[performance]\nstrict_hash_check = false\ndir_prune_exclude = true\nfile_size_limit = 2000000\n\n[output]\nformat = \"json\"\n</code></pre>"},{"location":"configuration/#loading-configuration-files","title":"Loading Configuration Files","text":"<pre><code>import tomllib\nfrom pysearch.config import SearchConfig\n\n# Load from TOML file\nwith open(\"pysearch.toml\", \"rb\") as f:\n    config_data = tomllib.load(f)\n\n# Create config from loaded data\nconfig = SearchConfig(**config_data.get(\"search\", {}))\n\n# Apply other sections\nif \"content\" in config_data:\n    for key, value in config_data[\"content\"].items():\n        setattr(config, key, value)\n</code></pre>"},{"location":"configuration/#configuration-file-locations","title":"Configuration File Locations","text":"<p>pysearch looks for configuration files in this order:</p> <ol> <li><code>./pysearch.toml</code> (current directory)</li> <li><code>~/.config/pysearch/config.toml</code> (user config)</li> <li><code>/etc/pysearch/config.toml</code> (system config)</li> </ol>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"configuration/#supported-variables","title":"Supported Variables","text":"<pre><code># Basic settings\nexport PYSEARCH_PATHS=\"./src:./tests\"\nexport PYSEARCH_CONTEXT=\"5\"\nexport PYSEARCH_PARALLEL=\"true\"\nexport PYSEARCH_WORKERS=\"8\"\n\n# Content filtering\nexport PYSEARCH_ENABLE_DOCSTRINGS=\"false\"\nexport PYSEARCH_ENABLE_COMMENTS=\"false\"\nexport PYSEARCH_ENABLE_STRINGS=\"true\"\n\n# Performance\nexport PYSEARCH_STRICT_HASH_CHECK=\"false\"\nexport PYSEARCH_DIR_PRUNE_EXCLUDE=\"true\"\nexport PYSEARCH_FILE_SIZE_LIMIT=\"2000000\"\n\n# Output\nexport PYSEARCH_OUTPUT_FORMAT=\"json\"\n\n# Debug\nexport PYSEARCH_DEBUG=\"true\"\nexport PYSEARCH_LOG_LEVEL=\"DEBUG\"\n</code></pre>"},{"location":"configuration/#loading-environment-variables","title":"Loading Environment Variables","text":"<pre><code>import os\nfrom pysearch.config import SearchConfig\n\nconfig = SearchConfig()\n\n# Override with environment variables\nif \"PYSEARCH_PARALLEL\" in os.environ:\n    config.parallel = os.environ[\"PYSEARCH_PARALLEL\"].lower() == \"true\"\n\nif \"PYSEARCH_WORKERS\" in os.environ:\n    config.workers = int(os.environ[\"PYSEARCH_WORKERS\"])\n\nif \"PYSEARCH_CONTEXT\" in os.environ:\n    config.context = int(os.environ[\"PYSEARCH_CONTEXT\"])\n</code></pre>"},{"location":"configuration/#best-practices","title":"Best Practices","text":""},{"location":"configuration/#development-configuration","title":"Development Configuration","text":"<p>Optimized for fast iteration during development:</p> <pre><code>dev_config = SearchConfig(\n    paths=[\"./src\"],\n    exclude=[\"**/.venv/**\", \"**/.git/**\", \"**/__pycache__/**\"],\n    parallel=True,\n    workers=4,\n    strict_hash_check=False,  # Faster\n    dir_prune_exclude=True,   # Skip excluded dirs\n    enable_comments=False,    # Focus on code\n    context=2                 # Minimal context\n)\n</code></pre>"},{"location":"configuration/#production-configuration","title":"Production Configuration","text":"<p>Optimized for accuracy and comprehensive results:</p> <pre><code>prod_config = SearchConfig(\n    paths=[\"./src\", \"./tests\", \"./docs\"],\n    parallel=True,\n    workers=8,\n    strict_hash_check=True,   # More accurate\n    dir_prune_exclude=True,\n    enable_docstrings=True,   # Include documentation\n    enable_comments=True,     # Include comments\n    context=5,                # More context\n    file_size_limit=5_000_000 # Larger files\n)\n</code></pre>"},{"location":"configuration/#cicd-configuration","title":"CI/CD Configuration","text":"<p>Optimized for continuous integration:</p> <pre><code>ci_config = SearchConfig(\n    paths=[\"./src\", \"./tests\"],\n    parallel=True,\n    workers=2,                # Limited resources\n    strict_hash_check=True,   # Consistency\n    dir_prune_exclude=True,\n    file_size_limit=1_000_000, # Limit memory usage\n    context=3\n)\n</code></pre>"},{"location":"configuration/#large-codebase-configuration","title":"Large Codebase Configuration","text":"<p>Optimized for very large repositories:</p> <pre><code>large_config = SearchConfig(\n    paths=[\"./src\"],          # Limit scope\n    exclude=[\n        \"**/.venv/**\", \"**/.git/**\", \"**/__pycache__/**\",\n        \"**/node_modules/**\", \"**/build/**\", \"**/dist/**\",\n        \"**/vendor/**\", \"**/third_party/**\"\n    ],\n    parallel=True,\n    workers=12,               # More workers\n    strict_hash_check=False,  # Performance over precision\n    dir_prune_exclude=True,   # Essential for large repos\n    file_size_limit=500_000,  # Smaller limit\n    enable_docstrings=False,  # Reduce processing\n    context=1                 # Minimal context\n)\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":"<pre><code>def validate_config(config: SearchConfig) -&gt; list[str]:\n    \"\"\"Validate configuration and return warnings.\"\"\"\n    warnings = []\n\n    # Check for common issues\n    if config.workers &gt; 16:\n        warnings.append(\"High worker count may cause resource contention\")\n\n    if config.file_size_limit &gt; 10_000_000:\n        warnings.append(\"Large file size limit may cause memory issues\")\n\n    if not config.exclude:\n        warnings.append(\"No exclude patterns may slow down search\")\n\n    if config.context &gt; 10:\n        warnings.append(\"High context count increases output size\")\n\n    return warnings\n\n# Usage\nwarnings = validate_config(config)\nfor warning in warnings:\n    print(f\"Warning: {warning}\")\n</code></pre>"},{"location":"configuration/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>def benchmark_config(config: SearchConfig, pattern: str) -&gt; dict:\n    \"\"\"Benchmark a configuration with a test pattern.\"\"\"\n    import time\n\n    engine = PySearch(config)\n\n    start_time = time.time()\n    results = engine.search(pattern)\n    elapsed = time.time() - start_time\n\n    return {\n        \"elapsed_seconds\": elapsed,\n        \"files_scanned\": results.stats.files_scanned,\n        \"matches_found\": len(results.items),\n        \"files_per_second\": results.stats.files_scanned / elapsed if elapsed &gt; 0 else 0\n    }\n\n# Usage\nbenchmark = benchmark_config(config, \"def main\")\nprint(f\"Performance: {benchmark['files_per_second']:.1f} files/second\")\n</code></pre>"},{"location":"configuration/#configuration-reference","title":"Configuration Reference","text":""},{"location":"configuration/#complete-field-reference","title":"Complete Field Reference","text":"Field Type Default Description <code>paths</code> <code>list[str]</code> <code>[\".\"]</code> Search paths <code>include</code> <code>list[str] \\| None</code> <code>None</code> Include patterns (auto-detect if None) <code>exclude</code> <code>list[str] \\| None</code> <code>None</code> Exclude patterns (defaults if None) <code>languages</code> <code>set[Language] \\| None</code> <code>None</code> Language filter (auto-detect if None) <code>file_size_limit</code> <code>int</code> <code>2_000_000</code> File size limit in bytes <code>context</code> <code>int</code> <code>2</code> Context lines around matches <code>output_format</code> <code>OutputFormat</code> <code>TEXT</code> Output format <code>follow_symlinks</code> <code>bool</code> <code>False</code> Follow symbolic links <code>enable_docstrings</code> <code>bool</code> <code>True</code> Search in docstrings <code>enable_comments</code> <code>bool</code> <code>True</code> Search in comments <code>enable_strings</code> <code>bool</code> <code>True</code> Search in string literals <code>parallel</code> <code>bool</code> <code>True</code> Enable parallel processing <code>workers</code> <code>int</code> <code>0</code> Worker threads (0 = auto) <code>cache_dir</code> <code>Path \\| None</code> <code>None</code> Cache directory <code>strict_hash_check</code> <code>bool</code> <code>False</code> Strict file change detection <code>dir_prune_exclude</code> <code>bool</code> <code>True</code> Prune excluded directories <code>rank_strategy</code> <code>RankStrategy</code> <code>DEFAULT</code> Ranking strategy <code>ast_weight</code> <code>float</code> <code>2.0</code> AST match weight <code>text_weight</code> <code>float</code> <code>1.0</code> Text match weight"},{"location":"configuration/#method-reference","title":"Method Reference","text":"Method Description <code>get_include_patterns()</code> Get resolved include patterns <code>get_exclude_patterns()</code> Get resolved exclude patterns <code>resolve_cache_dir()</code> Get resolved cache directory"},{"location":"configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"configuration/#common-configuration-issues","title":"Common Configuration Issues","text":"<ol> <li>No matches found</li> <li>Check <code>include</code>/<code>exclude</code> patterns</li> <li>Verify <code>paths</code> are correct</li> <li> <p>Ensure <code>languages</code> includes target files</p> </li> <li> <p>Slow performance</p> </li> <li>Enable <code>parallel=True</code></li> <li>Set appropriate <code>workers</code> count</li> <li>Use <code>dir_prune_exclude=True</code></li> <li> <p>Add more <code>exclude</code> patterns</p> </li> <li> <p>High memory usage</p> </li> <li>Reduce <code>file_size_limit</code></li> <li>Lower <code>workers</code> count</li> <li> <p>Decrease <code>context</code> lines</p> </li> <li> <p>Missing results</p> </li> <li>Check content toggles (<code>enable_docstrings</code>, etc.)</li> <li>Verify <code>file_size_limit</code> isn't too restrictive</li> <li>Ensure <code>follow_symlinks</code> setting is appropriate</li> </ol>"},{"location":"configuration/#debug-configuration","title":"Debug Configuration","text":"<pre><code>from pysearch.logging_config import enable_debug_logging\n\n# Enable debug logging\nenable_debug_logging()\n\n# Create config with debug info\nconfig = SearchConfig(paths=[\"./src\"])\nprint(f\"Include patterns: {config.get_include_patterns()}\")\nprint(f\"Exclude patterns: {config.get_exclude_patterns()}\")\nprint(f\"Cache directory: {config.resolve_cache_dir()}\")\n</code></pre>"},{"location":"configuration/#see-also","title":"See Also","text":"<ul> <li>Usage Guide - How to use pysearch effectively</li> <li>API Reference - Complete API documentation</li> <li>Architecture - Internal design and components</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This document answers common questions about pysearch usage, configuration, and troubleshooting.</p>"},{"location":"faq/#table-of-contents","title":"Table of Contents","text":"<ul> <li>General Questions</li> <li>Installation &amp; Setup</li> <li>Usage &amp; Features</li> <li>Performance &amp; Optimization</li> <li>Configuration</li> <li>Troubleshooting</li> <li>Development &amp; Contributing</li> </ul>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-pysearch","title":"What is pysearch?","text":"<p>pysearch is a high-performance, context-aware search engine for Python codebases that supports text/regex/AST/semantic search. It provides both CLI and programmable API interfaces, designed for engineering-grade retrieval in large multi-module projects.</p>"},{"location":"faq/#how-is-pysearch-different-from-grep-or-ripgrep","title":"How is pysearch different from grep or ripgrep?","text":"<p>While grep and ripgrep are excellent for text searching, pysearch offers:</p> <ul> <li>AST-aware search: Understand code structure (functions, classes, decorators)</li> <li>Semantic search: Find conceptually similar code</li> <li>Context-aware results: Intelligent context extraction</li> <li>Multi-format output: JSON, highlighted terminal, plain text</li> <li>Python integration: Native Python API for toolchain integration</li> <li>Advanced filtering: File metadata, language-specific filters</li> </ul>"},{"location":"faq/#what-programming-languages-does-pysearch-support","title":"What programming languages does pysearch support?","text":"<p>pysearch primarily focuses on Python but supports multiple languages:</p> <ul> <li>Full support: Python (.py, .pyx, .pyi)</li> <li>Text search: JavaScript, TypeScript, Java, C/C++, Rust, Go, and more</li> <li>Planned: Enhanced AST support for additional languages</li> </ul>"},{"location":"faq/#is-pysearch-suitable-for-large-codebases","title":"Is pysearch suitable for large codebases?","text":"<p>Yes! pysearch is designed for large codebases with:</p> <ul> <li>Parallel processing: Multi-threaded search execution</li> <li>Intelligent caching: File metadata and result caching</li> <li>Incremental indexing: Only processes changed files</li> <li>Memory optimization: Efficient memory usage patterns</li> <li>Directory pruning: Skip excluded directories early</li> </ul>"},{"location":"faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<p>Minimum:</p> <ul> <li>Python 3.10+</li> <li>512 MB RAM</li> <li>50 MB disk space</li> </ul> <p>Recommended:</p> <ul> <li>Python 3.11+</li> <li>4 GB RAM</li> <li>Multi-core CPU</li> <li>SSD storage</li> </ul>"},{"location":"faq/#how-do-i-install-pysearch","title":"How do I install pysearch?","text":"<pre><code># From PyPI (when published)\npip install pysearch\n\n# From source\npip install git+https://github.com/your-org/pysearch.git\n\n# Development installation\ngit clone https://github.com/your-org/pysearch.git\ncd pysearch\npip install -e \".[dev]\"\n</code></pre>"},{"location":"faq/#can-i-use-pysearch-without-installing-it-globally","title":"Can I use pysearch without installing it globally?","text":"<p>Yes! Use virtual environments:</p> <pre><code># Create virtual environment\npython -m venv pysearch-env\nsource pysearch-env/bin/activate  # Linux/macOS\n# pysearch-env\\Scripts\\activate   # Windows\n\n# Install pysearch\npip install pysearch\n</code></pre>"},{"location":"faq/#how-do-i-update-pysearch","title":"How do I update pysearch?","text":"<pre><code># Update from PyPI\npip install --upgrade pysearch\n\n# Update from source\npip install --upgrade git+https://github.com/your-org/pysearch.git\n</code></pre>"},{"location":"faq/#usage-features","title":"Usage &amp; Features","text":""},{"location":"faq/#how-do-i-perform-a-basic-search","title":"How do I perform a basic search?","text":"<pre><code># CLI\npysearch find --pattern \"def main\" --path ./src\n\n# Python API\nfrom pysearch import PySearch, SearchConfig\nengine = PySearch(SearchConfig(paths=[\"./src\"]))\nresults = engine.search(\"def main\")\n</code></pre>"},{"location":"faq/#whats-the-difference-between-text-regex-and-ast-search","title":"What's the difference between text, regex, and AST search?","text":"<ul> <li>Text search: Simple string matching</li> </ul> <pre><code>pysearch find --pattern \"TODO\"\n</code></pre> <ul> <li>Regex search: Pattern matching with regular expressions</li> </ul> <pre><code>pysearch find --pattern \"def.*handler\" --regex\n</code></pre> <ul> <li>AST search: Structure-aware code search</li> </ul> <pre><code>pysearch find --pattern \"def\" --ast --filter-func-name \".*handler\"\n</code></pre>"},{"location":"faq/#how-do-i-search-for-specific-code-structures","title":"How do I search for specific code structures?","text":"<p>Use AST filters:</p> <pre><code># Find functions with specific names\npysearch find --pattern \"def\" --ast --filter-func-name \"test_.*\"\n\n# Find classes with decorators\npysearch find --pattern \"class\" --ast --filter-decorator \"dataclass\"\n\n# Find specific imports\npysearch find --pattern \"import\" --ast --filter-import \"requests.*\"\n</code></pre>"},{"location":"faq/#can-i-search-across-multiple-directories","title":"Can I search across multiple directories?","text":"<p>Yes:</p> <pre><code># CLI\npysearch find --path ./src --path ./tests --pattern \"pattern\"\n\n# API\nconfig = SearchConfig(paths=[\"./src\", \"./tests\"])\n</code></pre>"},{"location":"faq/#how-do-i-exclude-certain-files-or-directories","title":"How do I exclude certain files or directories?","text":"<pre><code># CLI\npysearch find --exclude \"**/.venv/**\" --exclude \"**/build/**\" --pattern \"pattern\"\n\n# API\nconfig = SearchConfig(exclude=[\"**/.venv/**\", \"**/build/**\"])\n</code></pre>"},{"location":"faq/#what-output-formats-are-available","title":"What output formats are available?","text":"<ul> <li>text: Human-readable (default)</li> <li>json: Machine-readable structured data</li> <li>highlight: Syntax-highlighted terminal output</li> </ul> <pre><code>pysearch find --pattern \"pattern\" --format json\n</code></pre>"},{"location":"faq/#how-do-i-get-more-context-around-matches","title":"How do I get more context around matches?","text":"<pre><code># Show 5 lines before and after each match\npysearch find --pattern \"pattern\" --context 5\n</code></pre>"},{"location":"faq/#performance-optimization","title":"Performance &amp; Optimization","text":""},{"location":"faq/#how-can-i-make-searches-faster","title":"How can I make searches faster?","text":"<ol> <li>Use specific paths: Limit search scope</li> </ol> <pre><code>pysearch find --path ./src --pattern \"pattern\"  # Not --path .\n</code></pre> <ol> <li>Add exclusions: Skip unnecessary directories</li> </ol> <pre><code>pysearch find --exclude \"**/.venv/**\" --exclude \"**/.git/**\" --pattern \"pattern\"\n</code></pre> <ol> <li>Enable parallel processing:</li> </ol> <pre><code>pysearch find --parallel --workers 8 --pattern \"pattern\"\n</code></pre> <ol> <li>Disable unnecessary content:</li> </ol> <pre><code>pysearch find --no-docstrings --no-comments --pattern \"pattern\"\n</code></pre>"},{"location":"faq/#why-is-my-first-search-slow","title":"Why is my first search slow?","text":"<p>The first search builds the file index. Subsequent searches are much faster due to caching. You can pre-build the index:</p> <pre><code>from pysearch import PySearch, SearchConfig\nengine = PySearch(SearchConfig(paths=[\"./src\"]))\nengine.indexer.build_index()  # Pre-build index\n</code></pre>"},{"location":"faq/#how-much-memory-does-pysearch-use","title":"How much memory does pysearch use?","text":"<p>Memory usage depends on:</p> <ul> <li>Codebase size: Larger codebases use more memory</li> <li>File size limits: Set limits to control memory usage</li> <li>Parallel workers: More workers use more memory</li> <li>Context lines: More context increases memory usage</li> </ul> <p>Typical usage: 50-200 MB for medium codebases (10K-100K files).</p>"},{"location":"faq/#can-i-limit-memory-usage","title":"Can I limit memory usage?","text":"<p>Yes:</p> <pre><code>config = SearchConfig(\n    file_size_limit=1_000_000,  # 1MB file limit\n    workers=2,                  # Fewer workers\n    context=1                   # Less context\n)\n</code></pre>"},{"location":"faq/#configuration","title":"Configuration","text":""},{"location":"faq/#how-do-i-create-a-configuration-file","title":"How do I create a configuration file?","text":"<p>Create <code>pysearch.toml</code>:</p> <pre><code>[search]\npaths = [\"./src\", \"./tests\"]\ninclude = [\"**/*.py\"]\nexclude = [\"**/.venv/**\", \"**/__pycache__/**\"]\ncontext = 3\nparallel = true\n\n[content]\nenable_docstrings = true\nenable_comments = false\nenable_strings = true\n</code></pre>"},{"location":"faq/#where-should-i-put-configuration-files","title":"Where should I put configuration files?","text":"<p>pysearch looks for configuration in:</p> <ol> <li><code>./pysearch.toml</code> (current directory)</li> <li><code>~/.config/pysearch/config.toml</code> (user config)</li> <li><code>/etc/pysearch/config.toml</code> (system config)</li> </ol>"},{"location":"faq/#can-i-use-environment-variables","title":"Can I use environment variables?","text":"<p>Yes:</p> <pre><code>export PYSEARCH_PATHS=\"./src:./tests\"\nexport PYSEARCH_PARALLEL=\"true\"\nexport PYSEARCH_WORKERS=\"8\"\nexport PYSEARCH_CONTEXT=\"5\"\n</code></pre>"},{"location":"faq/#how-do-i-configure-for-different-environments","title":"How do I configure for different environments?","text":"<pre><code># Development\ndev_config = SearchConfig(\n    paths=[\"./src\"],\n    parallel=True,\n    strict_hash_check=False,  # Faster\n    enable_comments=False     # Focus on code\n)\n\n# Production/CI\nprod_config = SearchConfig(\n    paths=[\"./src\", \"./tests\"],\n    parallel=True,\n    strict_hash_check=True,   # More accurate\n    enable_docstrings=True    # Include docs\n)\n</code></pre>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#no-results-found-but-i-know-matches-exist","title":"No results found, but I know matches exist","text":"<ol> <li>Check include/exclude patterns:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --include \"**/*.py\" --stats\n</code></pre> <ol> <li>Verify paths:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --path ./correct/path\n</code></pre> <ol> <li>Test with broader patterns:</li> </ol> <pre><code>pysearch find --pattern \"def\" --regex  # Should find functions\n</code></pre> <ol> <li>Check content filters:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --docstrings --comments --strings\n</code></pre>"},{"location":"faq/#search-is-very-slow","title":"Search is very slow","text":"<ol> <li>Add more exclusions:</li> </ol> <pre><code>pysearch find --exclude \"**/.venv/**\" --exclude \"**/.git/**\" --pattern \"pattern\"\n</code></pre> <ol> <li>Limit search scope:</li> </ol> <pre><code>pysearch find --path ./specific/directory --pattern \"pattern\"\n</code></pre> <ol> <li>Enable parallel processing:</li> </ol> <pre><code>pysearch find --parallel --workers 4 --pattern \"pattern\"\n</code></pre> <ol> <li>Disable unnecessary parsing:</li> </ol> <pre><code>pysearch find --no-docstrings --no-comments --pattern \"pattern\"\n</code></pre>"},{"location":"faq/#getting-encoding-errors","title":"Getting encoding errors","text":"<ol> <li>Check file encoding:</li> </ol> <pre><code>import chardet\nwith open('file.py', 'rb') as f:\n    result = chardet.detect(f.read())\n    print(result['encoding'])\n</code></pre> <ol> <li>Skip problematic files:</li> </ol> <pre><code>pysearch find --exclude \"**/problematic_file.py\" --pattern \"pattern\"\n</code></pre>"},{"location":"faq/#memory-usage-is-too-high","title":"Memory usage is too high","text":"<ol> <li>Set file size limits:</li> </ol> <pre><code>config = SearchConfig(file_size_limit=1_000_000)  # 1MB\n</code></pre> <ol> <li>Reduce parallel workers:</li> </ol> <pre><code>config = SearchConfig(workers=2)\n</code></pre> <ol> <li>Decrease context lines:</li> </ol> <pre><code>config = SearchConfig(context=1)\n</code></pre>"},{"location":"faq/#command-not-found-after-installation","title":"Command not found after installation","text":"<ol> <li>Check installation:</li> </ol> <pre><code>pip show pysearch\npython -m pysearch --version\n</code></pre> <ol> <li>Add to PATH (if needed):</li> </ol> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre> <ol> <li>Use full Python path:</li> </ol> <pre><code>python -m pysearch find --pattern \"pattern\"\n</code></pre>"},{"location":"faq/#development-contributing","title":"Development &amp; Contributing","text":""},{"location":"faq/#how-do-i-set-up-a-development-environment","title":"How do I set up a development environment?","text":"<pre><code>git clone https://github.com/your-org/pysearch.git\ncd pysearch\npip install -e \".[dev]\"\npre-commit install\npytest  # Run tests\n</code></pre>"},{"location":"faq/#how-do-i-run-tests","title":"How do I run tests?","text":"<pre><code># All tests\npytest\n\n# Specific test file\npytest tests/test_api.py\n\n# With coverage\npytest --cov=pysearch\n\n# Benchmarks\npytest tests/benchmarks -k benchmark\n</code></pre>"},{"location":"faq/#how-do-i-contribute","title":"How do I contribute?","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch: <code>git checkout -b feature-name</code></li> <li>Make changes and add tests</li> <li>Run tests and linting: <code>make test lint</code></li> <li>Submit a pull request</li> </ol> <p>See Contributing Guide for details.</p>"},{"location":"faq/#how-do-i-report-bugs","title":"How do I report bugs?","text":"<ol> <li>Check existing issues on GitHub</li> <li>Create a new issue with:</li> <li>pysearch version (<code>pysearch --version</code>)</li> <li>Python version (<code>python --version</code>)</li> <li>Operating system</li> <li>Minimal reproduction example</li> <li>Expected vs. actual behavior</li> </ol>"},{"location":"faq/#how-do-i-request-features","title":"How do I request features?","text":"<ol> <li>Check the roadmap in docs/roadmap.md</li> <li>Search existing feature requests</li> <li>Create a new issue with:</li> <li>Clear description of the feature</li> <li>Use cases and benefits</li> <li>Proposed implementation (if any)</li> </ol>"},{"location":"faq/#still-have-questions","title":"Still Have Questions?","text":"<p>If your question isn't answered here:</p> <ol> <li>Search the documentation: Check other docs in the <code>docs/</code> directory</li> <li>Search GitHub issues: Look for similar questions or issues</li> <li>Ask the community: Start a discussion on GitHub</li> <li>Contact maintainers: Create an issue for specific problems</li> </ol>"},{"location":"faq/#contributing-to-faq","title":"Contributing to FAQ","text":"<p>Found an error or have a question that should be added? Please:</p> <ol> <li>Edit this file and submit a pull request</li> <li>Create an issue suggesting the addition</li> <li>Start a discussion about the topic</li> </ol> <p>We appreciate community contributions to improve this FAQ!</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide covers all installation methods for pysearch, from basic installation to advanced development setups.</p>"},{"location":"installation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>System Requirements</li> <li>Quick Installation</li> <li>Installation Methods</li> <li>Development Installation</li> <li>Verification</li> <li>Troubleshooting</li> <li>Uninstallation</li> </ul>"},{"location":"installation/#system-requirements","title":"System Requirements","text":""},{"location":"installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.10 or higher</li> <li>Operating System: Linux, macOS, or Windows</li> <li>Memory: 512 MB RAM (2 GB recommended for large codebases)</li> <li>Disk Space: 50 MB for installation (additional space for cache)</li> </ul>"},{"location":"installation/#recommended-requirements","title":"Recommended Requirements","text":"<ul> <li>Python: 3.11 or 3.12 (latest stable)</li> <li>Memory: 4 GB RAM or more</li> <li>CPU: Multi-core processor for parallel processing</li> <li>Disk: SSD for better I/O performance</li> </ul>"},{"location":"installation/#supported-platforms","title":"Supported Platforms","text":"Platform Status Notes Linux (Ubuntu 20.04+) \u2705 Fully Supported Primary development platform Linux (CentOS 8+) \u2705 Fully Supported Enterprise Linux support macOS (10.15+) \u2705 Fully Supported Intel and Apple Silicon Windows 10+ \u2705 Fully Supported PowerShell and Command Prompt Windows WSL2 \u2705 Fully Supported Recommended for Windows users"},{"location":"installation/#quick-installation","title":"Quick Installation","text":""},{"location":"installation/#for-end-users","title":"For End Users","text":"<pre><code># Install from PyPI (when published)\npip install pysearch\n\n# Or install from source\npip install git+https://github.com/your-org/pysearch.git\n</code></pre>"},{"location":"installation/#for-developers","title":"For Developers","text":"<pre><code># Clone and install in development mode\ngit clone https://github.com/your-org/pysearch.git\ncd pysearch\npip install -e \".[dev]\"\n</code></pre>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#method-1-pypi-installation-recommended","title":"Method 1: PyPI Installation (Recommended)","text":"<p>When pysearch is published to PyPI:</p> <pre><code># Install latest stable version\npip install pysearch\n\n# Install specific version\npip install pysearch==1.0.0\n\n# Upgrade to latest version\npip install --upgrade pysearch\n</code></pre>"},{"location":"installation/#method-2-source-installation","title":"Method 2: Source Installation","text":"<p>Install directly from the source repository:</p> <pre><code># Install from GitHub main branch\npip install git+https://github.com/your-org/pysearch.git\n\n# Install from specific branch or tag\npip install git+https://github.com/your-org/pysearch.git@v1.0.0\n\n# Install from local clone\ngit clone https://github.com/your-org/pysearch.git\ncd pysearch\npip install .\n</code></pre>"},{"location":"installation/#method-3-editable-installation","title":"Method 3: Editable Installation","text":"<p>For development or customization:</p> <pre><code># Clone repository\ngit clone https://github.com/your-org/pysearch.git\ncd pysearch\n\n# Install in editable mode\npip install -e .\n\n# Install with development dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"installation/#method-4-virtual-environment-installation","title":"Method 4: Virtual Environment Installation","text":"<p>Recommended for isolated environments:</p> <pre><code># Create virtual environment\npython -m venv pysearch-env\n\n# Activate virtual environment\n# On Linux/macOS:\nsource pysearch-env/bin/activate\n# On Windows:\npysearch-env\\Scripts\\activate\n\n# Install pysearch\npip install pysearch\n\n# Deactivate when done\ndeactivate\n</code></pre>"},{"location":"installation/#method-5-conda-installation","title":"Method 5: Conda Installation","text":"<p>For Conda users:</p> <pre><code># Create conda environment\nconda create -n pysearch python=3.11\nconda activate pysearch\n\n# Install from PyPI\npip install pysearch\n\n# Or install from conda-forge (if available)\nconda install -c conda-forge pysearch\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":""},{"location":"installation/#complete-development-setup","title":"Complete Development Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/your-org/pysearch.git\ncd pysearch\n\n# Install development dependencies\npip install -e \".[dev]\"\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests to verify installation\npytest\n\n# Run linting\nmake lint\n\n# Run type checking\nmake type\n\n# Build documentation\nmake docs\n</code></pre>"},{"location":"installation/#development-dependencies","title":"Development Dependencies","text":"<p>The <code>[dev]</code> extra includes:</p> <ul> <li>Testing: pytest, pytest-cov, pytest-benchmark</li> <li>Linting: ruff, black, mypy</li> <li>Documentation: mkdocs, mkdocs-material</li> <li>Development: pre-commit, build tools</li> </ul>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Install additional features as needed:</p> <pre><code># Semantic search features\npip install pysearch[semantic]\n\n# Advanced caching\npip install pysearch[cache]\n\n# All optional features\npip install pysearch[all]\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":""},{"location":"installation/#basic-verification","title":"Basic Verification","text":"<pre><code># Check installation\npysearch --version\n\n# Run help command\npysearch --help\n\n# Test basic search\npysearch find --pattern \"def main\" --path .\n</code></pre>"},{"location":"installation/#comprehensive-verification","title":"Comprehensive Verification","text":"<pre><code># Run validation script\n./scripts/validate-project.sh\n\n# Or use make command\nmake validate\n\n# Run test suite\npytest\n\n# Check all components\npython -c \"\nimport pysearch\nfrom pysearch import PySearch, SearchConfig\nfrom pysearch.types import Query\n\nprint('\u2705 pysearch imported successfully')\nprint(f'\ud83d\udce6 Version: {pysearch.__version__}')\n\n# Test basic functionality\nconfig = SearchConfig(paths=['.'])\nengine = PySearch(config)\nprint('\u2705 PySearch engine created successfully')\n\n# Test search\ntry:\n    results = engine.search('import')\n    print(f'\u2705 Search completed: {len(results.items)} results')\nexcept Exception as e:\n    print(f'\u274c Search failed: {e}')\n\"\n</code></pre>"},{"location":"installation/#performance-verification","title":"Performance Verification","text":"<pre><code># Run benchmarks\npytest tests/benchmarks -k benchmark\n\n# Test with large codebase\npysearch find --pattern \"class\" --path /large/codebase --stats\n\n# Memory usage test\npython -c \"\nimport psutil\nimport os\nfrom pysearch import PySearch, SearchConfig\n\nprocess = psutil.Process(os.getpid())\ninitial_memory = process.memory_info().rss / 1024 / 1024\n\nconfig = SearchConfig(paths=['.'])\nengine = PySearch(config)\nresults = engine.search('def')\n\nfinal_memory = process.memory_info().rss / 1024 / 1024\nprint(f'Memory usage: {final_memory - initial_memory:.1f} MB')\n\"\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"installation/#python-version-issues","title":"Python Version Issues","text":"<p>Problem: <code>ERROR: Python 3.10 or higher is required</code></p> <p>Solution:</p> <pre><code># Check Python version\npython --version\n\n# Install Python 3.10+ using pyenv\npyenv install 3.11.0\npyenv global 3.11.0\n\n# Or use system package manager\n# Ubuntu/Debian:\nsudo apt update &amp;&amp; sudo apt install python3.11\n\n# macOS with Homebrew:\nbrew install python@3.11\n</code></pre>"},{"location":"installation/#permission-issues","title":"Permission Issues","text":"<p>Problem: <code>Permission denied</code> during installation</p> <p>Solution:</p> <pre><code># Use user installation\npip install --user pysearch\n\n# Or use virtual environment\npython -m venv venv\nsource venv/bin/activate  # Linux/macOS\n# venv\\Scripts\\activate   # Windows\npip install pysearch\n</code></pre>"},{"location":"installation/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>Problem: <code>ERROR: pip's dependency resolver does not currently consider all the packages that are installed</code></p> <p>Solution:</p> <pre><code># Create fresh virtual environment\npython -m venv fresh-env\nsource fresh-env/bin/activate\npip install --upgrade pip\npip install pysearch\n\n# Or use pip-tools for dependency management\npip install pip-tools\npip-compile requirements.in\npip-sync requirements.txt\n</code></pre>"},{"location":"installation/#build-issues","title":"Build Issues","text":"<p>Problem: <code>Failed building wheel</code> or compilation errors</p> <p>Solution:</p> <pre><code># Update build tools\npip install --upgrade pip setuptools wheel\n\n# Install build dependencies\npip install build\n\n# For C extension issues, install development headers\n# Ubuntu/Debian:\nsudo apt install python3-dev build-essential\n\n# CentOS/RHEL:\nsudo yum install python3-devel gcc\n\n# macOS:\nxcode-select --install\n</code></pre>"},{"location":"installation/#platform-specific-issues","title":"Platform-Specific Issues","text":""},{"location":"installation/#windows-issues","title":"Windows Issues","text":"<p>Problem: <code>'pysearch' is not recognized as an internal or external command</code></p> <p>Solution:</p> <pre><code># Add Python Scripts to PATH\n# Or use full path\npython -m pysearch find --pattern \"def main\"\n\n# Or reinstall with --force-reinstall\npip install --force-reinstall pysearch\n</code></pre>"},{"location":"installation/#macos-issues","title":"macOS Issues","text":"<p>Problem: <code>command not found: pysearch</code> after installation</p> <p>Solution:</p> <pre><code># Check if installed in user directory\nls ~/.local/bin/pysearch\n\n# Add to PATH if needed\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n\n# Or use Homebrew Python\nbrew install python\npip3 install pysearch\n</code></pre>"},{"location":"installation/#linux-issues","title":"Linux Issues","text":"<p>Problem: <code>ImportError: No module named '_ctypes'</code></p> <p>Solution:</p> <pre><code># Install libffi development package\n# Ubuntu/Debian:\nsudo apt install libffi-dev\n\n# CentOS/RHEL:\nsudo yum install libffi-devel\n\n# Reinstall Python if needed\npyenv install 3.11.0\n</code></pre>"},{"location":"installation/#network-issues","title":"Network Issues","text":"<p>Problem: <code>Could not fetch URL</code> or timeout errors</p> <p>Solution:</p> <pre><code># Use different index\npip install -i https://pypi.org/simple/ pysearch\n\n# Configure proxy if needed\npip install --proxy http://proxy.company.com:8080 pysearch\n\n# Use offline installation\npip download pysearch\npip install pysearch-*.whl --no-index --find-links .\n</code></pre>"},{"location":"installation/#verification-failures","title":"Verification Failures","text":"<p>Problem: <code>pysearch --version</code> fails</p> <p>Solution:</p> <pre><code># Check installation location\npip show pysearch\n\n# Reinstall if corrupted\npip uninstall pysearch\npip install pysearch\n\n# Check for conflicting installations\npip list | grep pysearch\n</code></pre>"},{"location":"installation/#uninstallation","title":"Uninstallation","text":""},{"location":"installation/#complete-removal","title":"Complete Removal","text":"<pre><code># Uninstall pysearch\npip uninstall pysearch\n\n# Remove cache directories\nrm -rf ~/.cache/pysearch\nrm -rf ./.pysearch-cache\n\n# Remove configuration files (optional)\nrm -rf ~/.config/pysearch\n\n# Remove virtual environment (if used)\nrm -rf pysearch-env\n</code></pre>"},{"location":"installation/#clean-development-environment","title":"Clean Development Environment","text":"<pre><code># Remove development installation\npip uninstall pysearch\n\n# Remove pre-commit hooks\npre-commit uninstall\n\n# Clean build artifacts\nmake clean\n\n# Remove development dependencies\npip uninstall -r requirements-dev.txt\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Read the Usage Guide: Usage Guide</li> <li>Configure pysearch: Configuration Guide</li> <li>Explore Examples: Check the <code>examples/</code> directory</li> <li>Join the Community: Contribute to the project</li> </ol>"},{"location":"installation/#support","title":"Support","text":"<p>If you encounter issues not covered in this guide:</p> <ol> <li>Check the FAQ: FAQ</li> <li>Search Issues: GitHub Issues page</li> <li>Ask for Help: Community discussions</li> <li>Report Bugs: Create a new issue with installation details</li> </ol>"},{"location":"mcp-advanced/","title":"Advanced MCP Features","text":"<p>PySearch's MCP implementation provides several advanced features that go beyond basic code search. This document covers these capabilities in detail.</p>"},{"location":"mcp-advanced/#fuzzy-search","title":"Fuzzy Search","text":"<p>Fuzzy search allows you to find approximate matches rather than exact ones, which is useful when you're not sure about the exact spelling or wording.</p>"},{"location":"mcp-advanced/#configuration","title":"Configuration","text":"<p>Fuzzy search can be configured with several parameters:</p> <pre><code>fuzzy_config = {\n    \"similarity_threshold\": 0.6,  # Minimum similarity score (0.0 to 1.0)\n    \"max_results\": 100,           # Maximum number of fuzzy matches to return\n    \"algorithm\": \"ratio\",         # Algorithm: ratio, partial_ratio, token_sort_ratio, token_set_ratio\n    \"case_sensitive\": False       # Whether matching is case sensitive\n}\n\nresult = search_fuzzy(\n    pattern=\"autenticate_user\",   # Intentional typo\n    paths=[\"./src\"],\n    config=fuzzy_config,\n    context=3\n)\n</code></pre>"},{"location":"mcp-advanced/#use-cases","title":"Use Cases","text":"<ul> <li>Finding code with typos in variable or function names</li> <li>Searching when you're unsure of exact spelling</li> <li>Matching similar concepts with different implementations</li> </ul>"},{"location":"mcp-advanced/#multi-pattern-search","title":"Multi-Pattern Search","text":"<p>Multi-pattern search allows you to combine multiple search patterns with logical operators.</p>"},{"location":"mcp-advanced/#logical-operators","title":"Logical Operators","text":"<ol> <li>AND: Find results that match all patterns</li> <li>OR: Find results that match any pattern (default)</li> <li>NOT: Find results that match the first pattern but not subsequent ones</li> </ol>"},{"location":"mcp-advanced/#example-usage","title":"Example Usage","text":"<pre><code># Find functions that handle both authentication and logging\nquery = {\n    \"patterns\": [\"auth\", \"log\"],\n    \"operator\": \"AND\",\n    \"use_regex\": False\n}\n\nresult = search_multi_pattern(\n    query=query,\n    paths=[\"./src\"],\n    context=3\n)\n\n# Find error handling that is NOT related to network issues\nquery = {\n    \"patterns\": [\"except\", \"network\"],\n    \"operator\": \"NOT\",\n    \"use_regex\": True\n}\n\nresult = search_multi_pattern(\n    query=query,\n    paths=[\"./src\"],\n    context=3\n)\n</code></pre>"},{"location":"mcp-advanced/#result-ranking","title":"Result Ranking","text":"<p>Results can be ranked by relevance using multiple factors to ensure the most pertinent results appear first.</p>"},{"location":"mcp-advanced/#ranking-factors","title":"Ranking Factors","text":"<ol> <li>Pattern Match Quality: How well the result matches the search pattern</li> <li>File Importance: The importance of the file containing the match</li> <li>Context Relevance: How relevant the result is to recent searches</li> <li>Recency: How recently the file was modified</li> <li>File Size: Preference for moderately-sized files</li> <li>Language Priority: Priority based on programming language</li> </ol>"},{"location":"mcp-advanced/#customizing-rankings","title":"Customizing Rankings","text":"<pre><code># Customize ranking weights\nranking_factors = {\n    \"pattern_match_quality\": 0.5,\n    \"file_importance\": 0.2,\n    \"context_relevance\": 0.1,\n    \"recency\": 0.1,\n    \"file_size\": 0.05,\n    \"language_priority\": 0.05\n}\n\nresults = search_with_ranking(\n    pattern=\"user authentication\",\n    paths=[\"./src\"],\n    context=3,\n    ranking_factors=ranking_factors,\n    max_results=20\n)\n</code></pre>"},{"location":"mcp-advanced/#advanced-filtering","title":"Advanced Filtering","text":"<p>Filter results based on file properties and content metrics.</p>"},{"location":"mcp-advanced/#filter-options","title":"Filter Options","text":"<pre><code>search_filter = {\n    \"min_file_size\": 100,           # Only files larger than 100 bytes\n    \"max_file_size\": 100000,        # Only files smaller than 100KB\n    \"modified_after\": \"2023-01-01\", # Only recently modified files\n    \"languages\": [\"python\", \"javascript\"],  # Only specific languages\n    \"min_complexity\": 5.0,          # Only complex code\n    \"file_extensions\": [\".py\", \".js\"]  # Only specific file types\n}\n\nresult = search_with_filters(\n    pattern=\"function\",\n    search_filter=search_filter,\n    paths=[\"./src\"],\n    context=3\n)\n</code></pre>"},{"location":"mcp-advanced/#file-analysis-and-statistics","title":"File Analysis and Statistics","text":"<p>Get detailed information about your codebase files.</p>"},{"location":"mcp-advanced/#file-statistics","title":"File Statistics","text":"<pre><code># Get comprehensive file statistics\nstats = get_file_statistics(\n    paths=[\"./src\"],\n    include_analysis=True\n)\n\n# Example response structure:\n{\n    \"total_files\": 127,\n    \"total_size\": 2456789,\n    \"languages\": {\n        \"python\": 89,\n        \"javascript\": 23,\n        \"typescript\": 15\n    },\n    \"file_extensions\": {\n        \".py\": 89,\n        \".js\": 23,\n        \".ts\": 15\n    },\n    \"size_distribution\": {\n        \"small\": 45,\n        \"medium\": 67,\n        \"large\": 12,\n        \"very_large\": 3\n    },\n    \"complexity_distribution\": {\n        \"low\": 67,\n        \"medium\": 45,\n        \"high\": 12,\n        \"very_high\": 3\n    }\n}\n</code></pre>"},{"location":"mcp-advanced/#individual-file-analysis","title":"Individual File Analysis","text":"<pre><code># Analyze a specific file\nanalysis = analyze_file_content(\n    file_path=\"./src/user_auth.py\",\n    include_complexity=True,\n    include_quality_metrics=True\n)\n\n# Example response structure:\n{\n    \"file_path\": \"./src/user_auth.py\",\n    \"file_size\": 3456,\n    \"line_count\": 127,\n    \"complexity_score\": 12.3,\n    \"language\": \"python\",\n    \"functions_count\": 8,\n    \"classes_count\": 2,\n    \"imports_count\": 15,\n    \"comments_ratio\": 0.18,\n    \"code_quality_score\": 87.5,\n    \"last_modified\": \"2023-06-15T14:30:00\"\n}\n</code></pre>"},{"location":"mcp-advanced/#session-management","title":"Session Management","text":"<p>Maintain context across multiple searches for more intelligent results.</p>"},{"location":"mcp-advanced/#creating-and-using-sessions","title":"Creating and Using Sessions","text":"<pre><code># Start a new session\nresult1 = search_text(\n    pattern=\"database\",\n    session_id=\"project_analysis_001\"\n)\n\n# Continue with the same session\nresult2 = search_ast(\n    pattern=\"class\",\n    class_name=\".*Model$\",\n    session_id=\"project_analysis_001\"\n)\n\n# The server can use context from previous searches to improve relevance\n</code></pre>"},{"location":"mcp-advanced/#session-benefits","title":"Session Benefits","text":"<ul> <li>Context-aware result ranking</li> <li>Tracking of related searches</li> <li>Improved relevance for follow-up queries</li> <li>Ability to resume analysis workflows</li> </ul>"},{"location":"mcp-advanced/#progress-reporting","title":"Progress Reporting","text":"<p>For long-running searches, progress information is provided to keep users informed.</p>"},{"location":"mcp-advanced/#progress-information","title":"Progress Information","text":"<p>While the basic API doesn't expose progress directly, the underlying implementation provides: - Estimated time to completion - Files processed count - Results found so far - Current operation status</p>"},{"location":"mcp-advanced/#composition-support","title":"Composition Support","text":"<p>Chain operations together for complex analysis workflows.</p>"},{"location":"mcp-advanced/#example-composition","title":"Example Composition","text":"<pre><code># This is a conceptual example of how composition might work\n# in a future version of the API\n\n# 1. Find all authentication-related files\nauth_files = search_semantic(\"authentication\", context=0)\n\n# 2. Analyze those files for complexity\ncomplex_auth_files = []\nfor file in auth_files[\"items\"]:\n    analysis = analyze_file_content(file[\"file\"])\n    if analysis[\"complexity_score\"] &gt; 10:\n        complex_auth_files.append(file)\n\n# 3. Rank the complex files by importance\nranked_files = search_with_ranking(\n    pattern=\"authentication\",\n    paths=[file[\"file\"] for file in complex_auth_files]\n)\n</code></pre>"},{"location":"mcp-advanced/#performance-optimization","title":"Performance Optimization","text":""},{"location":"mcp-advanced/#parallel-processing","title":"Parallel Processing","text":"<p>Enable parallel processing for faster searches across large codebases:</p> <pre><code># Configure for parallel processing\nconfig = configure_search(\n    parallel=True,\n    workers=8  # Adjust based on your CPU cores\n)\n</code></pre>"},{"location":"mcp-advanced/#caching","title":"Caching","text":"<p>The search engine uses intelligent caching to speed up repeated searches:</p> <pre><code># Clear caches when needed\nclear_caches()\n</code></pre>"},{"location":"mcp-advanced/#security-considerations","title":"Security Considerations","text":""},{"location":"mcp-advanced/#file-access-control","title":"File Access Control","text":"<ul> <li>MCP servers only access files within configured paths</li> <li>Exclude patterns prevent access to sensitive directories</li> <li>All file access is logged for audit purposes</li> </ul>"},{"location":"mcp-advanced/#safe-regular-expressions","title":"Safe Regular Expressions","text":"<ul> <li>Regex patterns are validated before execution</li> <li>Timeouts prevent malicious patterns from hanging the server</li> <li>Resource limits prevent excessive memory usage</li> </ul>"},{"location":"mcp-advanced/#extending-mcp-functionality","title":"Extending MCP Functionality","text":""},{"location":"mcp-advanced/#adding-custom-tools","title":"Adding Custom Tools","text":"<p>You can extend the MCP server with custom tools by modifying the server implementation:</p> <pre><code># In your MCP server implementation\n@mcp.tool\nasync def custom_code_analysis(\n    paths: List[str],\n    analysis_type: str\n) -&gt; Dict[str, Any]:\n    \"\"\"Custom code analysis tool.\"\"\"\n    # Implementation here\n    pass\n</code></pre>"},{"location":"mcp-advanced/#custom-ranking-factors","title":"Custom Ranking Factors","text":"<p>Add your own ranking factors by extending the ranking system:</p> <pre><code># Extend the RankingFactor enum\nclass CustomRankingFactor(Enum):\n    BUSINESS_DOMAIN_RELEVANCE = \"business_domain_relevance\"\n    TEAM_OWNERSHIP = \"team_ownership\"\n\n# Use in ranking\ncustom_weights = {\n    RankingFactor.PATTERN_MATCH_QUALITY: 0.3,\n    RankingFactor.FILE_IMPORTANCE: 0.2,\n    CustomRankingFactor.BUSINESS_DOMAIN_RELEVANCE: 0.3,\n    CustomRankingFactor.TEAM_OWNERSHIP: 0.2\n}\n</code></pre>"},{"location":"mcp-advanced/#integration-patterns","title":"Integration Patterns","text":""},{"location":"mcp-advanced/#ide-integration","title":"IDE Integration","text":"<p>Use MCP servers to provide search capabilities within IDEs:</p> <ol> <li>Start the MCP server as a background process</li> <li>Connect IDE plugin to the server via stdio</li> <li>Expose search functionality through IDE commands</li> </ol>"},{"location":"mcp-advanced/#cicd-integration","title":"CI/CD Integration","text":"<p>Integrate code search into CI/CD pipelines:</p> <ol> <li>Run MCP server in pipeline environment</li> <li>Execute searches to validate code quality</li> <li>Fail builds based on search results</li> </ol>"},{"location":"mcp-advanced/#documentation-generation","title":"Documentation Generation","text":"<p>Use semantic search to automatically generate documentation:</p> <ol> <li>Search for functions with specific patterns</li> <li>Extract docstrings and comments</li> <li>Generate structured documentation</li> </ol>"},{"location":"mcp-api/","title":"MCP API Reference","text":"<p>This document provides detailed API reference for all tools available through the PySearch MCP servers.</p>"},{"location":"mcp-api/#core-search-tools","title":"Core Search Tools","text":""},{"location":"mcp-api/#search_text","title":"search_text","text":"<p>Perform basic text search across files.</p> <p>Parameters: - <code>pattern</code> (string, required): Text pattern to search for - <code>paths</code> (array of strings, optional): List of paths to search (uses configured paths if not provided) - <code>context</code> (integer, optional, default: 3): Number of context lines around matches - <code>case_sensitive</code> (boolean, optional, default: false): Whether search should be case sensitive</p> <p>Returns: - <code>SearchResponse</code>: Object containing search results, statistics, and query information</p>"},{"location":"mcp-api/#search_regex","title":"search_regex","text":"<p>Perform regex pattern search across files.</p> <p>Parameters: - <code>pattern</code> (string, required): Regex pattern to search for - <code>paths</code> (array of strings, optional): List of paths to search - <code>context</code> (integer, optional, default: 3): Number of context lines around matches - <code>case_sensitive</code> (boolean, optional, default: false): Whether search should be case sensitive</p> <p>Returns: - <code>SearchResponse</code>: Object containing search results, statistics, and query information</p>"},{"location":"mcp-api/#search_ast","title":"search_ast","text":"<p>Perform AST-based search with structural filters.</p> <p>Parameters: - <code>pattern</code> (string, required): Base pattern to search for - <code>func_name</code> (string, optional): Regex pattern to match function names - <code>class_name</code> (string, optional): Regex pattern to match class names - <code>decorator</code> (string, optional): Regex pattern to match decorator names - <code>imported</code> (string, optional): Regex pattern to match imported symbols - <code>paths</code> (array of strings, optional): List of paths to search - <code>context</code> (integer, optional, default: 3): Number of context lines around matches</p> <p>Returns: - <code>SearchResponse</code>: Object containing search results, statistics, and query information</p>"},{"location":"mcp-api/#search_semantic","title":"search_semantic","text":"<p>Perform semantic concept search.</p> <p>Parameters: - <code>concept</code> (string, required): Semantic concept to search for (e.g., \"database\", \"web\", \"testing\") - <code>paths</code> (array of strings, optional): List of paths to search - <code>context</code> (integer, optional, default: 3): Number of context lines around matches</p> <p>Returns: - <code>SearchResponse</code>: Object containing search results, statistics, and query information</p>"},{"location":"mcp-api/#advanced-search-tools-main-server-only","title":"Advanced Search Tools (Main Server Only)","text":""},{"location":"mcp-api/#search_fuzzy","title":"search_fuzzy","text":"<p>Perform fuzzy search with configurable similarity thresholds.</p> <p>Parameters: - <code>pattern</code> (string, required): Text pattern to search for with fuzzy matching - <code>paths</code> (array of strings, optional): List of paths to search - <code>config</code> (FuzzySearchConfig, optional): Fuzzy search configuration - <code>context</code> (integer, optional, default: 3): Number of context lines around matches - <code>session_id</code> (string, optional): Session ID for context management</p> <p>Returns: - <code>SearchResponse</code>: Object containing fuzzy matching results</p>"},{"location":"mcp-api/#search_multi_pattern","title":"search_multi_pattern","text":"<p>Perform multi-pattern search with logical operators.</p> <p>Parameters: - <code>query</code> (MultiPatternQuery, required): Multi-pattern query configuration - <code>paths</code> (array of strings, optional): List of paths to search - <code>context</code> (integer, optional, default: 3): Number of context lines around matches - <code>session_id</code> (string, optional): Session ID for context management</p> <p>Returns: - <code>SearchResponse</code>: Object containing combined results from multiple patterns</p>"},{"location":"mcp-api/#search_with_ranking","title":"search_with_ranking","text":"<p>Perform search with advanced result ranking.</p> <p>Parameters: - <code>pattern</code> (string, required): Search pattern - <code>paths</code> (array of strings, optional): List of paths to search - <code>context</code> (integer, optional, default: 3): Number of context lines around matches - <code>use_regex</code> (boolean, optional, default: false): Whether to use regex search - <code>ranking_factors</code> (dict, optional): Custom weights for ranking factors - <code>max_results</code> (integer, optional, default: 50): Maximum number of results to return - <code>session_id</code> (string, optional): Session ID for context management</p> <p>Returns: - <code>array of RankedSearchResult</code>: List of ranked search results</p>"},{"location":"mcp-api/#search_with_filters","title":"search_with_filters","text":"<p>Perform search with advanced filtering capabilities.</p> <p>Parameters: - <code>pattern</code> (string, required): Search pattern - <code>search_filter</code> (SearchFilter, required): Advanced filtering options - <code>paths</code> (array of strings, optional): List of paths to search - <code>context</code> (integer, optional, default: 3): Number of context lines around matches - <code>use_regex</code> (boolean, optional, default: false): Whether to use regex search - <code>session_id</code> (string, optional): Session ID for context management</p> <p>Returns: - <code>SearchResponse</code>: Object containing filtered results</p>"},{"location":"mcp-api/#configuration-tools","title":"Configuration Tools","text":""},{"location":"mcp-api/#configure_search","title":"configure_search","text":"<p>Update search configuration.</p> <p>Parameters: - <code>paths</code> (array of strings, optional): List of paths to search - <code>include_patterns</code> (array of strings, optional): File patterns to include - <code>exclude_patterns</code> (array of strings, optional): File patterns to exclude - <code>context</code> (integer, optional): Number of context lines - <code>parallel</code> (boolean, optional): Whether to use parallel processing - <code>workers</code> (integer, optional): Number of worker threads - <code>languages</code> (array of strings, optional): List of languages to filter by</p> <p>Returns: - <code>ConfigResponse</code>: Object containing updated configuration</p>"},{"location":"mcp-api/#get_search_config","title":"get_search_config","text":"<p>Get current search configuration.</p> <p>Returns: - <code>ConfigResponse</code>: Object containing current configuration</p>"},{"location":"mcp-api/#utility-tools","title":"Utility Tools","text":""},{"location":"mcp-api/#get_supported_languages","title":"get_supported_languages","text":"<p>Get list of supported programming languages.</p> <p>Returns: - <code>array of strings</code>: List of supported language names</p>"},{"location":"mcp-api/#clear_caches","title":"clear_caches","text":"<p>Clear search engine caches.</p> <p>Returns: - <code>dict</code>: Status message</p>"},{"location":"mcp-api/#get_search_history","title":"get_search_history","text":"<p>Get recent search history.</p> <p>Parameters: - <code>limit</code> (integer, optional, default: 10): Maximum number of history entries to return</p> <p>Returns: - <code>array of dicts</code>: List of recent search operations</p>"},{"location":"mcp-api/#get_file_statistics","title":"get_file_statistics","text":"<p>Get comprehensive statistics about files in the search paths. (Main server only)</p> <p>Parameters: - <code>paths</code> (array of strings, optional): List of paths to analyze - <code>include_analysis</code> (boolean, optional, default: false): Whether to include detailed file analysis</p> <p>Returns: - <code>dict</code>: Dictionary with file statistics and analysis</p>"},{"location":"mcp-api/#data-structures","title":"Data Structures","text":""},{"location":"mcp-api/#searchresponse","title":"SearchResponse","text":"<pre><code>{\n    \"items\": list[dict],          # List of search results\n    \"stats\": dict,                # Search statistics\n    \"query_info\": dict,           # Information about the query\n    \"total_matches\": int,         # Total number of matches\n    \"execution_time_ms\": float    # Execution time in milliseconds\n}\n</code></pre>"},{"location":"mcp-api/#configresponse","title":"ConfigResponse","text":"<pre><code>{\n    \"paths\": list[str],              # List of search paths\n    \"include_patterns\": list[str],   # File patterns to include\n    \"exclude_patterns\": list[str],   # File patterns to exclude\n    \"context_lines\": int,            # Number of context lines\n    \"parallel\": bool,                # Whether parallel processing is enabled\n    \"workers\": int,                  # Number of worker threads\n    \"languages\": list[str]           # List of languages to filter by\n}\n</code></pre>"},{"location":"mcp-api/#fuzzysearchconfig","title":"FuzzySearchConfig","text":"<pre><code>{\n    \"similarity_threshold\": float,  # Minimum similarity score (0.0 to 1.0)\n    \"max_results\": int,             # Maximum number of fuzzy matches to return\n    \"algorithm\": str,               # Fuzzy matching algorithm\n    \"case_sensitive\": bool          # Whether matching is case sensitive\n}\n</code></pre>"},{"location":"mcp-api/#multipatternquery","title":"MultiPatternQuery","text":"<pre><code>{\n    \"patterns\": list[str],      # List of patterns to search for\n    \"operator\": str,            # Logical operator (AND, OR, NOT)\n    \"use_regex\": bool,          # Whether to use regex search\n    \"use_fuzzy\": bool,          # Whether to use fuzzy search\n    \"fuzzy_config\": dict        # Fuzzy search configuration\n}\n</code></pre>"},{"location":"mcp-api/#searchfilter","title":"SearchFilter","text":"<pre><code>{\n    \"min_file_size\": int,         # Minimum file size in bytes\n    \"max_file_size\": int,         # Maximum file size in bytes\n    \"modified_after\": datetime,   # Only files modified after this date\n    \"modified_before\": datetime,  # Only files modified before this date\n    \"authors\": list[str],         # Only files by these authors\n    \"languages\": list[str],       # Only files in these languages\n    \"min_complexity\": float,      # Minimum complexity score\n    \"max_complexity\": float,      # Maximum complexity score\n    \"file_extensions\": list[str], # Only files with these extensions\n    \"exclude_patterns\": list[str] # Exclude files matching these patterns\n}\n</code></pre>"},{"location":"mcp-api/#rankedsearchresult","title":"RankedSearchResult","text":"<pre><code>{\n    \"item\": dict,              # The search result item\n    \"relevance_score\": float,  # Overall relevance score\n    \"ranking_factors\": dict    # Individual ranking factor scores\n}\n</code></pre>"},{"location":"mcp-overview/","title":"Model Context Protocol (MCP) Support","text":"<p>PySearch provides comprehensive integration with the Model Context Protocol (MCP), allowing AI assistants to leverage powerful code search capabilities directly within their workflows.</p>"},{"location":"mcp-overview/#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol (MCP) is an open standard that enables secure, controlled access to local resources and tools from within AI assistant applications. It allows AI assistants to interact with your codebase in a structured and safe way, providing access to file contents, search functionality, and other development tools.</p>"},{"location":"mcp-overview/#pysearch-mcp-servers","title":"PySearch MCP Servers","text":"<p>PySearch includes several MCP server implementations that expose different levels of functionality:</p>"},{"location":"mcp-overview/#available-servers","title":"Available Servers","text":"<ol> <li>Main MCP Server (<code>mcp_server.py</code>)</li> <li>Advanced features with fuzzy search, analysis, and composition</li> <li>Comprehensive search capabilities with ranking and filtering</li> <li>Session management and progress reporting</li> <li> <p>File content analysis and quality metrics</p> </li> <li> <p>Basic MCP Server (<code>basic_mcp_server.py</code>)</p> </li> <li>Core search functionality (text, regex, AST, semantic)</li> <li>Simple configuration management</li> <li> <p>Search history and statistics</p> </li> <li> <p>FastMCP Server (<code>fastmcp_server.py</code>)</p> </li> <li>FastMCP framework-based implementation</li> <li>Optimized performance</li> <li>Enhanced error handling</li> </ol>"},{"location":"mcp-overview/#quick-start","title":"Quick Start","text":""},{"location":"mcp-overview/#running-an-mcp-server","title":"Running an MCP Server","text":"<p>To run the main MCP server:</p> <pre><code>python mcp/servers/mcp_server.py\n</code></pre> <p>For the basic server:</p> <pre><code>python mcp/servers/basic_mcp_server.py\n</code></pre>"},{"location":"mcp-overview/#integration-with-ai-assistants","title":"Integration with AI Assistants","text":"<p>The MCP servers are designed to work with MCP-compatible AI assistants like Claude Desktop. Once configured, these tools will be available directly within the assistant interface.</p>"},{"location":"mcp-overview/#core-capabilities","title":"Core Capabilities","text":"<p>PySearch MCP servers provide the following capabilities to AI assistants:</p>"},{"location":"mcp-overview/#search-functionality","title":"Search Functionality","text":"<ul> <li>Text Search: Find literal text patterns in your codebase</li> <li>Regex Search: Use regular expressions for complex pattern matching</li> <li>AST Search: Structurally search code with filters for functions, classes, decorators, and imports</li> <li>Semantic Search: Search for conceptual matches rather than exact patterns</li> <li>Fuzzy Search: Find approximate matches with configurable similarity thresholds</li> <li>Multi-pattern Search: Combine multiple patterns with logical operators (AND, OR, NOT)</li> </ul>"},{"location":"mcp-overview/#advanced-features","title":"Advanced Features","text":"<ul> <li>Result Ranking: Results are ranked by relevance using multiple factors</li> <li>Filtering: Filter results by file size, modification date, complexity, and more</li> <li>Context Management: Maintain search sessions with context awareness</li> <li>File Analysis: Get detailed statistics and quality metrics for files</li> <li>Progress Reporting: Track long-running search operations</li> </ul>"},{"location":"mcp-overview/#configuration-management","title":"Configuration Management","text":"<ul> <li>Search Paths: Configure which directories to search</li> <li>Include/Exclude Patterns: Specify which files to include or exclude</li> <li>Context Lines: Control how much context to show around matches</li> <li>Parallel Processing: Configure parallel execution for performance</li> <li>Language Filtering: Filter by programming language</li> </ul>"},{"location":"mcp-overview/#utility-functions","title":"Utility Functions","text":"<ul> <li>Supported Languages: Get a list of supported programming languages</li> <li>Cache Management: Clear search caches to free memory</li> <li>Search History: Access recent search operations</li> </ul>"},{"location":"mcp-overview/#usage-examples","title":"Usage Examples","text":""},{"location":"mcp-overview/#basic-text-search","title":"Basic Text Search","text":"<p>Find all occurrences of \"main\" function definitions:</p> <pre><code>search_text(\"def main\", paths=[\"./src\"], context=2)\n</code></pre>"},{"location":"mcp-overview/#regex-search","title":"Regex Search","text":"<p>Find all test classes:</p> <pre><code>search_regex(\"class \\\\w+Test\", context=3)\n</code></pre>"},{"location":"mcp-overview/#ast-based-search","title":"AST-based Search","text":"<p>Find all handler functions:</p> <pre><code>search_ast(\"def\", func_name=\".*_handler$\", context=2)\n</code></pre>"},{"location":"mcp-overview/#semantic-search","title":"Semantic Search","text":"<p>Find database-related code:</p> <pre><code>search_semantic(\"database\", context=3)\n</code></pre>"},{"location":"mcp-overview/#configuration-management_1","title":"Configuration Management","text":"<p>Update search configuration:</p> <pre><code>configure_search(\n    paths=[\"./src\", \"./tests\"],\n    context=5,\n    workers=4\n)\n</code></pre>"},{"location":"mcp-overview/#integration-with-claude-desktop","title":"Integration with Claude Desktop","text":"<p>To use PySearch with Claude Desktop:</p> <ol> <li> <p>Install the required dependencies:    <pre><code>pip install fastmcp rapidfuzz\n</code></pre></p> </li> <li> <p>Configure Claude Desktop to connect to the PySearch MCP server</p> </li> <li> <p>Start using the tools directly in your conversations with Claude</p> </li> </ol> <p>The tools will appear as available functions within Claude, allowing you to search your codebase naturally as part of your conversation.</p>"},{"location":"mcp-overview/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see MCP API Reference.</p>"},{"location":"mcp-tutorial/","title":"Using PySearch with MCP","text":"<p>This tutorial will guide you through setting up and using PySearch with the Model Context Protocol (MCP) to enable powerful code search capabilities in AI assistants like Claude Desktop.</p>"},{"location":"mcp-tutorial/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ol> <li>Python 3.8 or higher installed</li> <li>PySearch installed (<code>pip install -e .</code>)</li> <li>Required dependencies for MCP functionality:    <pre><code>pip install fastmcp rapidfuzz\n</code></pre></li> </ol>"},{"location":"mcp-tutorial/#setting-up-the-mcp-server","title":"Setting Up the MCP Server","text":""},{"location":"mcp-tutorial/#1-choose-your-server","title":"1. Choose Your Server","text":"<p>PySearch provides three MCP server implementations:</p> <ul> <li>Main Server: Full-featured with advanced capabilities</li> <li>Basic Server: Core functionality only</li> <li>FastMCP Server: Optimized implementation</li> </ul> <p>For this tutorial, we'll use the Main Server which provides the most comprehensive feature set.</p>"},{"location":"mcp-tutorial/#2-run-the-server","title":"2. Run the Server","text":"<p>Start the MCP server from the project root:</p> <pre><code>python mcp/servers/mcp_server.py\n</code></pre> <p>The server will start and listen for MCP connections.</p>"},{"location":"mcp-tutorial/#integrating-with-claude-desktop","title":"Integrating with Claude Desktop","text":""},{"location":"mcp-tutorial/#1-configure-claude-desktop","title":"1. Configure Claude Desktop","text":"<p>Add the PySearch MCP server to your Claude Desktop configuration:</p> <ol> <li>Open Claude Desktop settings</li> <li>Navigate to the \"Tools\" section</li> <li>Add a new tool with the following configuration:</li> <li>Name: PySearch</li> <li>Command: <code>python /path/to/pysearch/mcp/servers/mcp_server.py</code></li> <li>Working Directory: <code>/path/to/pysearch</code></li> </ol>"},{"location":"mcp-tutorial/#2-test-the-integration","title":"2. Test the Integration","text":"<p>Once configured, Claude will have access to PySearch tools. You can test this by asking Claude to search your codebase:</p> <p>\"Find all functions that handle user authentication in the src directory\"</p> <p>Claude will automatically use the appropriate PySearch tools to perform this search.</p>"},{"location":"mcp-tutorial/#using-mcp-tools-directly","title":"Using MCP Tools Directly","text":"<p>You can also interact with the MCP server directly for testing purposes.</p>"},{"location":"mcp-tutorial/#example-1-basic-text-search","title":"Example 1: Basic Text Search","text":"<pre><code># Example of using the search_text tool\nresult = search_text(\n    pattern=\"def authenticate_user\",\n    paths=[\"./src\"],\n    context=3\n)\n</code></pre> <p>This will search for the exact text \"def authenticate_user\" in Python files under the <code>src</code> directory, returning 3 lines of context around each match.</p>"},{"location":"mcp-tutorial/#example-2-regex-search","title":"Example 2: Regex Search","text":"<pre><code># Example of using the search_regex tool\nresult = search_regex(\n    pattern=r\"class\\s+\\w+Test\",\n    context=2\n)\n</code></pre> <p>This will find all test classes in your codebase using a regular expression pattern.</p>"},{"location":"mcp-tutorial/#example-3-ast-based-search","title":"Example 3: AST-based Search","text":"<pre><code># Example of using the search_ast tool\nresult = search_ast(\n    pattern=\"def\",\n    func_name=\".*_handler$\",\n    decorator=\"route|api_endpoint\",\n    context=3\n)\n</code></pre> <p>This will find all functions that end with \"_handler\" and are decorated with either \"route\" or \"api_endpoint\".</p>"},{"location":"mcp-tutorial/#example-4-semantic-search","title":"Example 4: Semantic Search","text":"<pre><code># Example of using the search_semantic tool\nresult = search_semantic(\n    concept=\"database\",\n    context=2\n)\n</code></pre> <p>This will search for code related to database operations using semantic matching.</p>"},{"location":"mcp-tutorial/#advanced-usage","title":"Advanced Usage","text":""},{"location":"mcp-tutorial/#configuration-management","title":"Configuration Management","text":"<p>You can configure the search engine to customize its behavior:</p> <pre><code># Configure search settings\nconfig = configure_search(\n    paths=[\"./src\", \"./lib\"],\n    include_patterns=[\"**/*.py\", \"**/*.js\"],\n    exclude_patterns=[\"**/tests/**\", \"**/node_modules/**\"],\n    context=5,\n    parallel=True,\n    workers=4\n)\n\n# Check current configuration\ncurrent_config = get_search_config()\n</code></pre>"},{"location":"mcp-tutorial/#working-with-sessions","title":"Working with Sessions","text":"<p>The Main MCP Server supports session management for context-aware searches:</p> <pre><code># Perform searches within a session\nsession_result = search_text(\n    pattern=\"User\",\n    session_id=\"session123\"\n)\n\n# Later searches in the same session can leverage context\nrelated_result = search_ast(\n    pattern=\"class\",\n    class_name=\"User.*\",\n    session_id=\"session123\"\n)\n</code></pre>"},{"location":"mcp-tutorial/#file-analysis","title":"File Analysis","text":"<p>The Main MCP Server can analyze files for quality metrics:</p> <pre><code># Get file statistics\nstats = get_file_statistics(\n    paths=[\"./src\"],\n    include_analysis=True\n)\n</code></pre>"},{"location":"mcp-tutorial/#best-practices","title":"Best Practices","text":""},{"location":"mcp-tutorial/#1-use-appropriate-search-types","title":"1. Use Appropriate Search Types","text":"<ul> <li>Use text search for exact matches</li> <li>Use regex search for pattern matching</li> <li>Use AST search for structural code queries</li> <li>Use semantic search for conceptual queries</li> </ul>"},{"location":"mcp-tutorial/#2-optimize-performance","title":"2. Optimize Performance","text":"<ul> <li>Limit the search scope with specific paths when possible</li> <li>Use appropriate include/exclude patterns</li> <li>Adjust context lines based on your needs</li> <li>Use parallel processing for large codebases</li> </ul>"},{"location":"mcp-tutorial/#3-leverage-advanced-features","title":"3. Leverage Advanced Features","text":"<ul> <li>Use session management for context-aware searches</li> <li>Apply filters to narrow down results</li> <li>Use ranking to prioritize relevant results</li> <li>Combine multiple patterns with logical operators</li> </ul>"},{"location":"mcp-tutorial/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mcp-tutorial/#common-issues","title":"Common Issues","text":"<ol> <li>Server not starting: Ensure all dependencies are installed</li> <li>Tools not appearing: Check Claude Desktop configuration</li> <li>Slow searches: Adjust paths and patterns to limit scope</li> <li>No results: Verify paths exist and contain the expected files</li> </ol>"},{"location":"mcp-tutorial/#getting-help","title":"Getting Help","text":"<p>For detailed information about each tool, refer to the MCP API Reference.</p>"},{"location":"mcp-tutorial/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Advanced Features documentation</li> <li>Learn about Customizing Search Behavior</li> <li>Check out Real-world Examples</li> </ul>"},{"location":"performance/","title":"Performance Tuning Guide","text":"<p>This guide helps you optimize pysearch performance for different use cases and environments.</p>"},{"location":"performance/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Performance Overview</li> <li>Quick Optimization</li> <li>Configuration Tuning</li> <li>Hardware Considerations</li> <li>Use Case Optimization</li> <li>Monitoring &amp; Profiling</li> <li>Troubleshooting Performance</li> </ul>"},{"location":"performance/#performance-overview","title":"Performance Overview","text":""},{"location":"performance/#performance-factors","title":"Performance Factors","text":"<p>pysearch performance depends on several factors:</p> <ol> <li>Search Scope: Number and size of files to search</li> <li>Search Type: Text vs. regex vs. AST vs. semantic</li> <li>Hardware: CPU cores, memory, storage type</li> <li>Configuration: Parallel processing, caching, filters</li> <li>Codebase Characteristics: File sizes, directory structure</li> </ol>"},{"location":"performance/#performance-metrics","title":"Performance Metrics","text":"<p>Key metrics to monitor:</p> <ul> <li>Search Time: Total time to complete search</li> <li>Files/Second: Throughput of file processing</li> <li>Memory Usage: Peak memory consumption</li> <li>Cache Hit Rate: Percentage of cached results used</li> <li>CPU Utilization: Processor usage during search</li> </ul>"},{"location":"performance/#baseline-performance","title":"Baseline Performance","text":"<p>Typical performance on modern hardware:</p> Codebase Size Files Search Time Memory Usage Small (1K files) 1,000 0.1-0.5s 50-100 MB Medium (10K files) 10,000 0.5-2s 100-300 MB Large (100K files) 100,000 2-10s 300-800 MB Very Large (1M files) 1,000,000 10-60s 800-2000 MB"},{"location":"performance/#quick-optimization","title":"Quick Optimization","text":""},{"location":"performance/#immediate-performance-gains","title":"Immediate Performance Gains","text":"<p>Apply these optimizations for instant performance improvements:</p> <pre><code>from pysearch import PySearch, SearchConfig\n\n# High-performance configuration\nconfig = SearchConfig(\n    paths=[\"./src\"],                    # Specific paths only\n    exclude=[                           # Comprehensive exclusions\n        \"**/.venv/**\", \"**/.git/**\", \n        \"**/node_modules/**\", \"**/__pycache__/**\",\n        \"**/build/**\", \"**/dist/**\"\n    ],\n    parallel=True,                      # Enable parallel processing\n    workers=0,                          # Auto-detect CPU cores\n    strict_hash_check=False,            # Faster file change detection\n    dir_prune_exclude=True,             # Skip excluded directories\n    file_size_limit=2_000_000,          # 2MB file limit\n    context=2,                          # Minimal context\n    enable_docstrings=False,            # Skip docstrings if not needed\n    enable_comments=False               # Skip comments if not needed\n)\n\nengine = PySearch(config)\nengine.enable_caching(ttl=3600)         # Enable 1-hour caching\n</code></pre>"},{"location":"performance/#cli-quick-optimization","title":"CLI Quick Optimization","text":"<pre><code># Fast search command\npysearch find \\\n  --path ./src \\\n  --exclude \"**/.venv/**\" \"**/.git/**\" \"**/__pycache__/**\" \\\n  --pattern \"your_pattern\" \\\n  --parallel \\\n  --workers 8 \\\n  --no-docstrings \\\n  --no-comments \\\n  --context 1\n</code></pre>"},{"location":"performance/#configuration-tuning","title":"Configuration Tuning","text":""},{"location":"performance/#parallel-processing","title":"Parallel Processing","text":"<p>Optimize worker configuration based on your hardware:</p> <pre><code>import os\n\n# Conservative (for limited resources)\nconfig = SearchConfig(\n    parallel=True,\n    workers=2  # Fewer workers\n)\n\n# Balanced (recommended)\nconfig = SearchConfig(\n    parallel=True,\n    workers=0  # Auto-detect (usually cpu_count())\n)\n\n# Aggressive (for high-end systems)\nconfig = SearchConfig(\n    parallel=True,\n    workers=min(16, os.cpu_count() * 2)  # Up to 16 workers\n)\n</code></pre>"},{"location":"performance/#memory-optimization","title":"Memory Optimization","text":"<p>Control memory usage for different environments:</p> <pre><code># Memory-constrained environment\nconfig = SearchConfig(\n    file_size_limit=500_000,    # 500KB limit\n    workers=2,                  # Fewer workers\n    context=1,                  # Minimal context\n    strict_hash_check=False     # Less memory for hashing\n)\n\n# Memory-rich environment\nconfig = SearchConfig(\n    file_size_limit=10_000_000, # 10MB limit\n    workers=12,                 # More workers\n    context=5,                  # More context\n    strict_hash_check=True      # More accurate but uses more memory\n)\n</code></pre>"},{"location":"performance/#io-optimization","title":"I/O Optimization","text":"<p>Optimize for different storage types:</p> <pre><code># SSD optimization (fast random access)\nconfig = SearchConfig(\n    parallel=True,\n    workers=8,                  # More workers for parallel I/O\n    strict_hash_check=False,    # Faster file checking\n    dir_prune_exclude=True      # Skip directories early\n)\n\n# HDD optimization (sequential access preferred)\nconfig = SearchConfig(\n    parallel=True,\n    workers=4,                  # Fewer workers to reduce seeking\n    strict_hash_check=False,    # Minimize file reads\n    dir_prune_exclude=True      # Essential for HDDs\n)\n\n# Network storage optimization\nconfig = SearchConfig(\n    parallel=True,\n    workers=2,                  # Limit network connections\n    file_size_limit=1_000_000,  # Smaller files only\n    strict_hash_check=False     # Minimize network I/O\n)\n</code></pre>"},{"location":"performance/#caching-configuration","title":"Caching Configuration","text":"<p>Optimize caching for different usage patterns:</p> <pre><code># Development (frequent searches, changing files)\nengine.enable_caching(\n    ttl=1800,                   # 30 minutes\n    cache_dir=\"./dev-cache\"\n)\n\n# CI/CD (stable files, repeated searches)\nengine.enable_caching(\n    ttl=7200,                   # 2 hours\n    cache_dir=\"/tmp/ci-cache\"\n)\n\n# Production (stable codebase)\nengine.enable_caching(\n    ttl=86400,                  # 24 hours\n    cache_dir=\"/var/cache/pysearch\"\n)\n</code></pre>"},{"location":"performance/#hardware-considerations","title":"Hardware Considerations","text":""},{"location":"performance/#cpu-optimization","title":"CPU Optimization","text":"<p>Optimize for different CPU configurations:</p> <pre><code>import psutil\n\ncpu_count = psutil.cpu_count(logical=False)  # Physical cores\nlogical_count = psutil.cpu_count(logical=True)  # Logical cores\n\n# Single-core systems\nif cpu_count == 1:\n    config = SearchConfig(\n        parallel=False,  # Disable parallelism\n        workers=1\n    )\n\n# Multi-core systems\nelif cpu_count &lt;= 4:\n    config = SearchConfig(\n        parallel=True,\n        workers=cpu_count  # One worker per core\n    )\n\n# High-core systems\nelse:\n    config = SearchConfig(\n        parallel=True,\n        workers=min(cpu_count * 2, 16)  # Up to 2x cores, max 16\n    )\n</code></pre>"},{"location":"performance/#memory-optimization_1","title":"Memory Optimization","text":"<p>Adapt to available memory:</p> <pre><code>import psutil\n\nmemory_gb = psutil.virtual_memory().total // (1024**3)\n\n# Low memory systems (&lt; 4GB)\nif memory_gb &lt; 4:\n    config = SearchConfig(\n        file_size_limit=200_000,    # 200KB limit\n        workers=2,\n        context=1\n    )\n\n# Medium memory systems (4-16GB)\nelif memory_gb &lt; 16:\n    config = SearchConfig(\n        file_size_limit=1_000_000,  # 1MB limit\n        workers=4,\n        context=3\n    )\n\n# High memory systems (16GB+)\nelse:\n    config = SearchConfig(\n        file_size_limit=5_000_000,  # 5MB limit\n        workers=8,\n        context=5\n    )\n</code></pre>"},{"location":"performance/#storage-optimization","title":"Storage Optimization","text":"<p>Optimize for storage characteristics:</p> <pre><code>import shutil\n\n# Detect storage type (Linux)\ndef get_storage_type(path):\n    try:\n        # Check if path is on SSD\n        device = shutil.disk_usage(path)\n        # This is a simplified check - real implementation would\n        # check /sys/block/*/queue/rotational\n        return \"ssd\"  # or \"hdd\"\n    except:\n        return \"unknown\"\n\nstorage_type = get_storage_type(\".\")\n\nif storage_type == \"ssd\":\n    config = SearchConfig(\n        parallel=True,\n        workers=8,              # More workers for SSD\n        strict_hash_check=False # Fast random access\n    )\nelif storage_type == \"hdd\":\n    config = SearchConfig(\n        parallel=True,\n        workers=4,              # Fewer workers for HDD\n        strict_hash_check=False # Minimize seeks\n    )\n</code></pre>"},{"location":"performance/#use-case-optimization","title":"Use Case Optimization","text":""},{"location":"performance/#development-environment","title":"Development Environment","text":"<p>Optimize for frequent, interactive searches:</p> <pre><code># Development configuration\ndev_config = SearchConfig(\n    paths=[\"./src\"],            # Focus on source code\n    exclude=[\n        \"**/.venv/**\", \"**/.git/**\", \"**/__pycache__/**\",\n        \"**/node_modules/**\", \"**/build/**\", \"**/dist/**\"\n    ],\n    parallel=True,\n    workers=4,                  # Moderate parallelism\n    strict_hash_check=False,    # Fast iteration\n    dir_prune_exclude=True,\n    file_size_limit=1_000_000,  # 1MB limit\n    context=3,                  # Useful context\n    enable_docstrings=False,    # Focus on code\n    enable_comments=False,\n    enable_strings=True\n)\n\n# Enable short-term caching\nengine = PySearch(dev_config)\nengine.enable_caching(ttl=1800)  # 30 minutes\n</code></pre>"},{"location":"performance/#cicd-environment","title":"CI/CD Environment","text":"<p>Optimize for automated, batch processing:</p> <pre><code># CI/CD configuration\nci_config = SearchConfig(\n    paths=[\"./src\", \"./tests\"],\n    exclude=[\n        \"**/.venv/**\", \"**/.git/**\", \"**/__pycache__/**\",\n        \"**/node_modules/**\", \"**/build/**\", \"**/dist/**\",\n        \"**/htmlcov/**\", \"**/.pytest_cache/**\"\n    ],\n    parallel=True,\n    workers=2,                  # Limited CI resources\n    strict_hash_check=True,     # Consistency important\n    dir_prune_exclude=True,\n    file_size_limit=2_000_000,  # 2MB limit\n    context=2,                  # Minimal context for logs\n    enable_docstrings=True,     # Include all content\n    enable_comments=True,\n    enable_strings=True\n)\n\n# Longer caching for stable builds\nengine = PySearch(ci_config)\nengine.enable_caching(ttl=7200)  # 2 hours\n</code></pre>"},{"location":"performance/#production-analysis","title":"Production Analysis","text":"<p>Optimize for comprehensive, accurate analysis:</p> <pre><code># Production configuration\nprod_config = SearchConfig(\n    paths=[\"./src\", \"./tests\", \"./docs\"],\n    exclude=[\n        \"**/.venv/**\", \"**/.git/**\", \"**/__pycache__/**\",\n        \"**/node_modules/**\", \"**/build/**\", \"**/dist/**\"\n    ],\n    parallel=True,\n    workers=8,                  # Full parallelism\n    strict_hash_check=True,     # Maximum accuracy\n    dir_prune_exclude=True,\n    file_size_limit=5_000_000,  # 5MB limit\n    context=5,                  # Full context\n    enable_docstrings=True,     # Include everything\n    enable_comments=True,\n    enable_strings=True\n)\n\n# Long-term caching\nengine = PySearch(prod_config)\nengine.enable_caching(ttl=86400)  # 24 hours\n</code></pre>"},{"location":"performance/#large-codebase","title":"Large Codebase","text":"<p>Optimize for very large repositories:</p> <pre><code># Large codebase configuration\nlarge_config = SearchConfig(\n    paths=[\"./src\"],            # Limit scope\n    exclude=[\n        \"**/.venv/**\", \"**/.git/**\", \"**/__pycache__/**\",\n        \"**/node_modules/**\", \"**/build/**\", \"**/dist/**\",\n        \"**/vendor/**\", \"**/third_party/**\", \"**/external/**\"\n    ],\n    parallel=True,\n    workers=12,                 # High parallelism\n    strict_hash_check=False,    # Performance over precision\n    dir_prune_exclude=True,     # Essential for large repos\n    file_size_limit=1_000_000,  # 1MB limit\n    context=2,                  # Minimal context\n    enable_docstrings=False,    # Skip non-essential content\n    enable_comments=False,\n    enable_strings=True\n)\n\n# Aggressive caching\nengine = PySearch(large_config)\nengine.enable_caching(ttl=3600)  # 1 hour\n</code></pre>"},{"location":"performance/#monitoring-profiling","title":"Monitoring &amp; Profiling","text":""},{"location":"performance/#performance-monitoring","title":"Performance Monitoring","text":"<p>Monitor search performance:</p> <pre><code>import time\nimport psutil\nimport os\n\ndef monitor_search(engine, pattern):\n    \"\"\"Monitor search performance metrics.\"\"\"\n    process = psutil.Process(os.getpid())\n\n    # Initial state\n    start_time = time.time()\n    start_memory = process.memory_info().rss / 1024 / 1024  # MB\n    start_cpu = process.cpu_percent()\n\n    # Perform search\n    results = engine.search(pattern)\n\n    # Final state\n    end_time = time.time()\n    end_memory = process.memory_info().rss / 1024 / 1024  # MB\n    end_cpu = process.cpu_percent()\n\n    # Calculate metrics\n    elapsed = end_time - start_time\n    memory_used = end_memory - start_memory\n\n    print(f\"Performance Metrics:\")\n    print(f\"  Search time: {elapsed:.2f}s\")\n    print(f\"  Memory used: {memory_used:.1f} MB\")\n    print(f\"  CPU usage: {end_cpu:.1f}%\")\n    print(f\"  Files scanned: {results.stats.files_scanned}\")\n    print(f\"  Files/second: {results.stats.files_scanned / elapsed:.1f}\")\n    print(f\"  Results found: {len(results.items)}\")\n\n    if hasattr(results.stats, 'cache_hits'):\n        total_cache = results.stats.cache_hits + results.stats.cache_misses\n        if total_cache &gt; 0:\n            cache_rate = results.stats.cache_hits / total_cache\n            print(f\"  Cache hit rate: {cache_rate:.1%}\")\n\n    return results\n\n# Usage\nengine = PySearch(SearchConfig(paths=[\"./src\"]))\nresults = monitor_search(engine, \"def main\")\n</code></pre>"},{"location":"performance/#profiling-search-operations","title":"Profiling Search Operations","text":"<p>Profile different search types:</p> <pre><code>import cProfile\nimport pstats\nfrom pysearch import PySearch, SearchConfig\n\ndef profile_search(pattern, search_type=\"text\"):\n    \"\"\"Profile search performance.\"\"\"\n    config = SearchConfig(paths=[\"./src\"])\n    engine = PySearch(config)\n\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    if search_type == \"text\":\n        results = engine.search(pattern)\n    elif search_type == \"regex\":\n        results = engine.search(pattern, regex=True)\n    elif search_type == \"ast\":\n        from pysearch.types import ASTFilters\n        filters = ASTFilters(func_name=\".*\")\n        results = engine.search(pattern, use_ast=True, filters=filters)\n\n    profiler.disable()\n\n    # Analyze results\n    stats = pstats.Stats(profiler)\n    stats.sort_stats('cumulative')\n    stats.print_stats(20)  # Top 20 functions\n\n    return results\n\n# Profile different search types\nprint(\"=== Text Search Profile ===\")\nprofile_search(\"def main\", \"text\")\n\nprint(\"\\n=== Regex Search Profile ===\")\nprofile_search(\"def.*main\", \"regex\")\n\nprint(\"\\n=== AST Search Profile ===\")\nprofile_search(\"def\", \"ast\")\n</code></pre>"},{"location":"performance/#benchmarking","title":"Benchmarking","text":"<p>Create benchmarks for performance regression testing:</p> <pre><code>import time\nimport statistics\nfrom pysearch import PySearch, SearchConfig\n\ndef benchmark_search(pattern, iterations=5):\n    \"\"\"Benchmark search performance.\"\"\"\n    config = SearchConfig(paths=[\"./src\"])\n    engine = PySearch(config)\n\n    times = []\n\n    for i in range(iterations):\n        start = time.time()\n        results = engine.search(pattern)\n        end = time.time()\n        times.append(end - start)\n\n        print(f\"Iteration {i+1}: {end - start:.3f}s ({len(results.items)} results)\")\n\n    # Statistics\n    mean_time = statistics.mean(times)\n    median_time = statistics.median(times)\n    stdev_time = statistics.stdev(times) if len(times) &gt; 1 else 0\n\n    print(f\"\\nBenchmark Results:\")\n    print(f\"  Mean time: {mean_time:.3f}s\")\n    print(f\"  Median time: {median_time:.3f}s\")\n    print(f\"  Std deviation: {stdev_time:.3f}s\")\n    print(f\"  Min time: {min(times):.3f}s\")\n    print(f\"  Max time: {max(times):.3f}s\")\n\n    return {\n        'mean': mean_time,\n        'median': median_time,\n        'stdev': stdev_time,\n        'min': min(times),\n        'max': max(times)\n    }\n\n# Run benchmark\nbenchmark_results = benchmark_search(\"def main\")\n</code></pre>"},{"location":"performance/#troubleshooting-performance","title":"Troubleshooting Performance","text":""},{"location":"performance/#common-performance-issues","title":"Common Performance Issues","text":""},{"location":"performance/#slow-initial-search","title":"Slow Initial Search","text":"<p>Problem: First search is much slower than subsequent searches</p> <p>Cause: Index building overhead</p> <p>Solutions:</p> <ol> <li>Pre-build index:</li> </ol> <pre><code>engine = PySearch(config)\nengine.indexer.build_index()  # Pre-build\n</code></pre> <ol> <li>Enable persistent caching:</li> </ol> <pre><code>engine.enable_caching(ttl=86400)  # 24-hour cache\n</code></pre>"},{"location":"performance/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: Memory usage grows during search</p> <p>Cause: Large files or too many results</p> <p>Solutions:</p> <ol> <li>Limit file sizes:</li> </ol> <pre><code>config = SearchConfig(file_size_limit=1_000_000)  # 1MB\n</code></pre> <ol> <li>Reduce context:</li> </ol> <pre><code>config = SearchConfig(context=1)  # Minimal context\n</code></pre> <ol> <li>Process results in batches:</li> </ol> <pre><code>for i in range(0, len(results.items), 100):\n    batch = results.items[i:i+100]\n    process_batch(batch)\n</code></pre>"},{"location":"performance/#poor-parallel-performance","title":"Poor Parallel Performance","text":"<p>Problem: Parallel search isn't faster than sequential</p> <p>Cause: I/O bottleneck or overhead</p> <p>Solutions:</p> <ol> <li>Adjust worker count:</li> </ol> <pre><code># Try different worker counts\nfor workers in [1, 2, 4, 8]:\n    config = SearchConfig(workers=workers)\n    # Benchmark each configuration\n</code></pre> <ol> <li>Check storage type:</li> </ol> <pre><code># HDDs may not benefit from high parallelism\nconfig = SearchConfig(workers=2)  # For HDD\n</code></pre>"},{"location":"performance/#cache-inefficiency","title":"Cache Inefficiency","text":"<p>Problem: Low cache hit rates</p> <p>Cause: Files changing frequently or cache TTL too short</p> <p>Solutions:</p> <ol> <li>Increase cache TTL:</li> </ol> <pre><code>engine.enable_caching(ttl=7200)  # 2 hours\n</code></pre> <ol> <li>Check file modification patterns:</li> </ol> <pre><code># Monitor which files are changing\nresults = engine.search(\"pattern\")\nprint(f\"Cache hits: {results.stats.cache_hits}\")\nprint(f\"Cache misses: {results.stats.cache_misses}\")\n</code></pre>"},{"location":"performance/#performance-regression-testing","title":"Performance Regression Testing","text":"<p>Create automated performance tests:</p> <pre><code>import pytest\nimport time\nfrom pysearch import PySearch, SearchConfig\n\nclass TestPerformance:\n    def setup_method(self):\n        self.config = SearchConfig(paths=[\"./src\"])\n        self.engine = PySearch(self.config)\n\n    def test_search_performance(self):\n        \"\"\"Test that search completes within time limit.\"\"\"\n        start = time.time()\n        results = self.engine.search(\"def main\")\n        elapsed = time.time() - start\n\n        # Assert performance requirements\n        assert elapsed &lt; 5.0, f\"Search took {elapsed:.2f}s, expected &lt; 5.0s\"\n        assert len(results.items) &gt; 0, \"No results found\"\n\n    def test_memory_usage(self):\n        \"\"\"Test memory usage stays within limits.\"\"\"\n        import psutil\n        import os\n\n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss\n\n        results = self.engine.search(\"class\")\n\n        final_memory = process.memory_info().rss\n        memory_used = (final_memory - initial_memory) / 1024 / 1024  # MB\n\n        assert memory_used &lt; 500, f\"Used {memory_used:.1f}MB, expected &lt; 500MB\"\n\n# Run with: pytest test_performance.py -v\n</code></pre>"},{"location":"performance/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"performance/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li>Start with defaults and optimize incrementally</li> <li>Profile before optimizing to identify bottlenecks</li> <li>Match configuration to use case (dev vs. CI vs. prod)</li> <li>Monitor performance metrics regularly</li> <li>Test configuration changes with benchmarks</li> </ol>"},{"location":"performance/#hardware-best-practices","title":"Hardware Best Practices","text":"<ol> <li>Use SSDs for better I/O performance</li> <li>Ensure adequate RAM for your codebase size</li> <li>Utilize multiple CPU cores with parallel processing</li> <li>Consider network latency for remote storage</li> </ol>"},{"location":"performance/#usage-best-practices","title":"Usage Best Practices","text":"<ol> <li>Limit search scope to relevant directories</li> <li>Use appropriate search types for your needs</li> <li>Enable caching for repeated searches</li> <li>Exclude unnecessary files early</li> <li>Monitor resource usage in production</li> </ol>"},{"location":"performance/#development-best-practices","title":"Development Best Practices","text":"<ol> <li>Create performance tests for regression detection</li> <li>Profile different configurations for your codebase</li> <li>Document optimal settings for your team</li> <li>Monitor performance trends over time</li> <li>Share configurations across team members</li> </ol>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The following is the phased planning for pysearch, sorted by priority and impact.</p>"},{"location":"roadmap/#near-term-priority","title":"Near-term (Priority)","text":"<ul> <li>Enhanced Semantic Search: Introduce optional embedding backends (local/remote), support toggles and pluggable strategies</li> <li>Parallel Indexing: Multi-process/multi-threading to improve large repository scanning performance</li> <li>Result Deduplication &amp; Aggregation: Unified aggregation across matchers and files</li> <li>Richer Output: Markdown/HTML export with highlighting and jump links</li> <li>IDE Integration: VS Code extension (minimal viable), protocol-based CLI output</li> </ul>"},{"location":"roadmap/#medium-term","title":"Medium-term","text":"<ul> <li>Persistent Caching: SQLite/disk structured caching for cross-session reuse</li> <li>Cross-language Foundation: Abstract universal matching pipeline, explore basic support for TS/Go</li> <li>Enhanced AST Queries: DSL-based with pattern templates and placeholders</li> <li>Performance Profiling: Generate flame graphs/metrics export for benchmarking and regression analysis</li> </ul>"},{"location":"roadmap/#long-term","title":"Long-term","text":"<ul> <li>Distributed Indexing &amp; Search: Multi-node collaboration for ultra-large monolithic repositories</li> <li>Smarter Ranking: Learning to Rank (LTR) with interactive feedback</li> <li>Team Workflows: Server/service deployment with unified search portal</li> </ul> <p>Welcome to contribute suggestions or participate in implementation through Issues/PRs. See CONTRIBUTING.md for detailed contribution process.</p>"},{"location":"style-guide/","title":"Documentation Style Guide","text":"<p>This guide establishes consistent standards for all pysearch documentation to ensure clarity, accessibility, and maintainability.</p>"},{"location":"style-guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>General Principles</li> <li>Document Structure</li> <li>Writing Style</li> <li>Formatting Standards</li> <li>Code Examples</li> <li>API Documentation</li> <li>Tutorial Guidelines</li> <li>Templates</li> </ul>"},{"location":"style-guide/#general-principles","title":"General Principles","text":""},{"location":"style-guide/#clarity-first","title":"Clarity First","text":"<ul> <li>Write for your audience: Consider the reader's experience level, from beginner to advanced.</li> <li>Be concise: Remove unnecessary words without losing meaning.</li> <li>Use active voice: \"Configure the search\" instead of \"The search should be configured.\"</li> <li>Avoid jargon: Explain technical terms when first introduced.</li> </ul>"},{"location":"style-guide/#consistency","title":"Consistency","text":"<ul> <li>Follow established patterns throughout all documentation.</li> <li>Use consistent terminology (e.g., always \"search engine\" not \"search tool\").</li> <li>Maintain uniform formatting across all documents.</li> <li>Apply the same structure to similar document types.</li> </ul>"},{"location":"style-guide/#accessibility","title":"Accessibility","text":"<ul> <li>Use clear headings for easy navigation.</li> <li>Include a table of contents for longer documents.</li> <li>Provide alternative text for images and diagrams.</li> <li>Use descriptive link text instead of \"click here.\"</li> </ul>"},{"location":"style-guide/#maintainability","title":"Maintainability","text":"<ul> <li>Keep examples current and test them regularly.</li> <li>Use relative links for internal references.</li> <li>Include modification dates for time-sensitive content.</li> <li>Write modular content that can be easily updated.</li> </ul>"},{"location":"style-guide/#document-structure","title":"Document Structure","text":""},{"location":"style-guide/#standard-document-layout","title":"Standard Document Layout","text":"<p>Every documentation file should follow this structure:</p> <pre><code># Document Title\n\nBrief description of what this document covers (1-2 sentences).\n\n## Table of Contents\n\n- [Section 1](#section-1)\n- [Section 2](#section-2)\n- [Subsection 2.1](#subsection-21)\n\n---\n\n## Section 1\n\nContent here...\n\n### Subsection 1.1\n\nContent here...\n\n---\n\n## See Also\n\n- [Related Document 1](link1.md)\n- [Related Document 2](link2.md)\n</code></pre>"},{"location":"style-guide/#heading-hierarchy","title":"Heading Hierarchy","text":"<p>Use consistent heading levels:</p> <ul> <li>H1 (<code>#</code>): Document title (only one per document).</li> <li>H2 (<code>##</code>): Major sections.</li> <li>H3 (<code>###</code>): Subsections.</li> <li>H4 (<code>####</code>): Sub-subsections (use sparingly).</li> </ul>"},{"location":"style-guide/#table-of-contents_1","title":"Table of Contents","text":"<p>Include a table of contents for documents longer than 3 sections:</p> <pre><code>## Table of Contents\n\n- [Getting Started](#getting-started)\n- [Basic Usage](#basic-usage)\n  - [Configuration](#configuration)\n  - [Search Types](#search-types)\n- [Advanced Topics](#advanced-topics)\n</code></pre>"},{"location":"style-guide/#writing-style","title":"Writing Style","text":""},{"location":"style-guide/#tone-and-voice","title":"Tone and Voice","text":"<ul> <li>Professional but approachable: Friendly without being casual.</li> <li>Confident: Use definitive statements when appropriate.</li> <li>Helpful: Anticipate user questions and provide solutions.</li> <li>Inclusive: Use gender-neutral language and avoid assumptions.</li> </ul>"},{"location":"style-guide/#grammar-and-usage","title":"Grammar and Usage","text":""},{"location":"style-guide/#preferred-constructions","title":"Preferred Constructions","text":"<p>\u2705 Good Examples:</p> <ul> <li>\"Configure pysearch to search your codebase.\"</li> <li>\"The search returns results in JSON format.\"</li> <li>\"You can filter results by file type.\"</li> </ul> <p>\u274c Avoid:</p> <ul> <li>\"pysearch can be configured to search your codebase\" (passive voice).</li> <li>\"The search will return results in JSON format\" (unnecessary future tense).</li> <li>\"Results can be filtered by file type\" (passive voice).</li> </ul>"},{"location":"style-guide/#technical-terms","title":"Technical Terms","text":"<ul> <li>Define terms on first use: \"AST (Abstract Syntax Tree).\"</li> <li>Use consistent terminology throughout all documentation.</li> <li>Prefer simple terms when possible: \"use\" instead of \"utilize.\"</li> </ul>"},{"location":"style-guide/#common-terms-and-conventions","title":"Common Terms and Conventions","text":"Preferred Avoid pysearch PySearch (except in code) search engine search tool, searcher configuration config (in prose) command line command-line (as adjective) file system filesystem codebase code base"},{"location":"style-guide/#formatting-standards","title":"Formatting Standards","text":""},{"location":"style-guide/#text-formatting","title":"Text Formatting","text":"<ul> <li>Bold (<code>**text**</code>): For emphasis, UI elements, important terms.</li> <li>Italic (<code>*text*</code>): For file names, variables, first use of terms.</li> <li><code>Code</code> (<code>`text`</code>): For code snippets, commands, file paths.</li> <li>Bold code (<code>**</code>code<code>**</code>): For important code elements.</li> </ul>"},{"location":"style-guide/#lists","title":"Lists","text":""},{"location":"style-guide/#unordered-lists","title":"Unordered Lists","text":"<p>Use <code>-</code> for consistency:</p> <pre><code>- First item\n- Second item\n  - Nested item\n  - Another nested item\n- Third item\n</code></pre>"},{"location":"style-guide/#ordered-lists","title":"Ordered Lists","text":"<p>Use numbers with periods:</p> <pre><code>1. First step\n2. Second step\n   1. Sub-step\n   2. Another sub-step\n3. Third step\n</code></pre>"},{"location":"style-guide/#links","title":"Links","text":""},{"location":"style-guide/#internal-links","title":"Internal Links","text":"<p>Use relative paths:</p> <pre><code>- [Usage Guide](usage.md)\n- [API Reference](api-reference.md)\n- [Examples](../examples/README.md)\n</code></pre>"},{"location":"style-guide/#external-links","title":"External Links","text":"<p>Include descriptive text:</p> <pre><code>- [Python Documentation](https://docs.python.org/)\n- [Regular Expressions Guide](https://regexr.com/)\n</code></pre>"},{"location":"style-guide/#tables","title":"Tables","text":"<p>Use consistent formatting:</p> <pre><code>| Column 1 | Column 2 | Column 3 |\n|----------|----------|----------|\n| Value 1  | Value 2  | Value 3  |\n| Value 4  | Value 5  | Value 6  |\n</code></pre>"},{"location":"style-guide/#admonitions","title":"Admonitions","text":"<p>Use for important information:</p> <pre><code>!!! note\n    This is a note with important information.\n\n!!! warning\n    This is a warning about potential issues.\n\n!!! tip\n    This is a helpful tip for users.\n</code></pre>"},{"location":"style-guide/#code-examples","title":"Code Examples","text":""},{"location":"style-guide/#code-block-standards","title":"Code Block Standards","text":""},{"location":"style-guide/#language-specification","title":"Language Specification","text":"<p>Always specify the language:</p> <pre><code>```python\nfrom pysearch import PySearch\nengine = PySearch()\n</code></pre> <pre><code>pysearch find --pattern \"def main\"\n</code></pre> <pre><code>{\n  \"results\": [],\n  \"stats\": {}\n}\n</code></pre> <pre><code>#### Complete Examples\nProvide complete, runnable examples:\n\n```python\n# Good: Complete example\nfrom pysearch import PySearch, SearchConfig\n\nconfig = SearchConfig(paths=[\"./src\"])\nengine = PySearch(config)\nresults = engine.search(\"def main\")\nprint(f\"Found {len(results.items)} matches\")\n</code></pre> <pre><code># Avoid: Incomplete example\nresults = engine.search(\"def main\")  # Where does 'engine' come from?\n</code></pre>"},{"location":"style-guide/#comments-and-explanations","title":"Comments and Explanations","text":"<p>Add helpful comments:</p> <pre><code># Configure search for Python files only\nconfig = SearchConfig(\n    paths=[\"./src\"],           # Search in source directory\n    include=[\"**/*.py\"],       # Only Python files\n    exclude=[\"**/.venv/**\"]    # Skip virtual environment\n)\n\n# Create search engine\nengine = PySearch(config)\n\n# Perform search\nresults = engine.search(\"def main\")\n</code></pre>"},{"location":"style-guide/#command-line-examples","title":"Command Line Examples","text":"<p>Show complete commands with context:</p> <pre><code># Basic search in current directory\npysearch find --pattern \"TODO\"\n\n# Search with specific paths and patterns\npysearch find \\\n  --pattern \"def.*handler\" \\\n  --regex \\\n  --path ./src \\\n  --path ./tests \\\n  --context 3\n</code></pre>"},{"location":"style-guide/#output-examples","title":"Output Examples","text":"<p>Show expected output when helpful:</p> <pre><code>$ pysearch find --pattern \"def main\" --stats\nFound 3 matches in 2 files\nScanned 45 files in 125ms\n</code></pre>"},{"location":"style-guide/#api-documentation","title":"API Documentation","text":""},{"location":"style-guide/#function-documentation","title":"Function Documentation","text":"<p>Use this template for functions:</p> <pre><code>def search_files(pattern: str, paths: list[str], regex: bool = False) -&gt; SearchResult:\n    \"\"\"Search for pattern in specified files.\n\n    Args:\n        pattern: The search pattern to match.\n        paths: List of file paths to search.\n        regex: Whether to treat pattern as regex (default: False).\n\n    Returns:\n        SearchResult containing matches and metadata.\n\n    Raises:\n        SearchError: If search operation fails.\n        FileNotFoundError: If specified paths don't exist.\n\n    Example:\n        &gt;&gt;&gt; result = search_files(\"def main\", [\"./src\"])\n        &gt;&gt;&gt; print(f\"Found {len(result.items)} matches\")\n        Found 3 matches\n    \"\"\"\n</code></pre>"},{"location":"style-guide/#class-documentation","title":"Class Documentation","text":"<p>Use this template for classes:</p> <pre><code>class SearchConfig:\n    \"\"\"Configuration for search operations.\n\n    This class manages all configuration options for pysearch,\n    including search paths, file patterns, and performance settings.\n\n    Attributes:\n        paths: List of directories to search.\n        include: File patterns to include.\n        exclude: File patterns to exclude.\n\n    Example:\n        &gt;&gt;&gt; config = SearchConfig(paths=[\"./src\"])\n        &gt;&gt;&gt; config.include = [\"**/*.py\"]\n        &gt;&gt;&gt; engine = PySearch(config)\n    \"\"\"\n</code></pre>"},{"location":"style-guide/#tutorial-guidelines","title":"Tutorial Guidelines","text":""},{"location":"style-guide/#tutorial-structure","title":"Tutorial Structure","text":"<p>Every tutorial should follow this structure:</p> <ol> <li>Introduction: What will be learned</li> <li>Prerequisites: Required knowledge/setup</li> <li>Step-by-step content: Numbered lessons</li> <li>Exercises: Hands-on practice</li> <li>Summary: What was covered</li> <li>Next steps: Where to go next</li> </ol>"},{"location":"style-guide/#writing-tutorials","title":"Writing Tutorials","text":""},{"location":"style-guide/#use-progressive-disclosure","title":"Use Progressive Disclosure","text":"<p>Start simple and build complexity:</p> <pre><code>## Lesson 1: Basic Search\nLearn to perform simple text searches.\n\n## Lesson 2: Adding Filters\nAdd file type and path filters to your searches.\n\n## Lesson 3: Advanced Patterns\nUse regular expressions for complex patterns.\n</code></pre>"},{"location":"style-guide/#include-exercises","title":"Include Exercises","text":"<p>Provide hands-on practice:</p> <pre><code>### Exercise 1: Your Turn\nTry searching for these patterns in your own codebase:\n1. Find all TODO comments\n2. Locate test functions\n3. Search for import statements\n\n### Solution\nHere's how to approach each exercise...\n</code></pre>"},{"location":"style-guide/#show-expected-results","title":"Show Expected Results","text":"<p>Help users verify their progress:</p> <pre><code>When you run this command:\n```bash\npysearch find --pattern \"def test_\"\n</code></pre> <p>You should see output similar to:</p> <pre><code>Found 15 matches in 8 files\n./tests/test_api.py:10: def test_basic_search():\n./tests/test_config.py:25: def test_configuration():\n...\n</code></pre> <p>```</p>"},{"location":"style-guide/#templates","title":"Templates","text":""},{"location":"style-guide/#document-templates","title":"Document Templates","text":""},{"location":"style-guide/#user-guide-template","title":"User Guide Template","text":"<p>See user-guide-template.md for the full template.</p>"},{"location":"style-guide/#api-reference-template","title":"API Reference Template","text":"<p>See api-reference-template.md for the full template.</p>"},{"location":"style-guide/#checklist-templates","title":"Checklist Templates","text":""},{"location":"style-guide/#documentation-review-checklist","title":"Documentation Review Checklist","text":"<ul> <li> Structure: Follows standard document layout</li> <li> Headings: Uses consistent heading hierarchy</li> <li> TOC: Includes table of contents (if needed)</li> <li> Writing: Uses active voice and clear language</li> <li> Code: All examples are complete and tested</li> <li> Links: All internal links work correctly</li> <li> Formatting: Consistent with style guide</li> <li> Grammar: Proofread for errors</li> <li> Accessibility: Includes alt text for images</li> </ul>"},{"location":"style-guide/#tutorial-review-checklist","title":"Tutorial Review Checklist","text":"<ul> <li> Learning objectives: Clearly stated</li> <li> Prerequisites: Listed and accurate</li> <li> Progressive structure: Builds complexity gradually</li> <li> Code examples: Complete and runnable</li> <li> Exercises: Provide meaningful practice</li> <li> Solutions: Include example solutions</li> <li> Next steps: Guide to further learning</li> </ul>"},{"location":"style-guide/#maintenance","title":"Maintenance","text":""},{"location":"style-guide/#regular-reviews","title":"Regular Reviews","text":"<ul> <li>Monthly: Check for broken links and outdated examples.</li> <li>Quarterly: Review and update screenshots and UI references.</li> <li>Per release: Update version-specific information.</li> <li>Annually: Comprehensive style and structure review.</li> </ul>"},{"location":"style-guide/#version-control","title":"Version Control","text":"<ul> <li>Track changes: Use meaningful commit messages for documentation.</li> <li>Review process: All documentation changes should be reviewed.</li> <li>Testing: Verify all code examples work with current version.</li> </ul>"},{"location":"style-guide/#tools-and-resources","title":"Tools and Resources","text":""},{"location":"style-guide/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>Markdown editor: Typora, Mark Text, or VS Code</li> <li>Link checker: markdown-link-check</li> <li>Spell checker: aspell or VS Code extensions</li> <li>Grammar checker: Grammarly or LanguageTool</li> </ul>"},{"location":"style-guide/#style-resources","title":"Style Resources","text":"<ul> <li>Google Developer Documentation Style Guide</li> <li>Microsoft Writing Style Guide</li> <li>Plain Language Guidelines</li> </ul> <p>This style guide is a living document. Please suggest improvements and updates as the project evolves.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and resolve common issues with pysearch.</p>"},{"location":"troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Quick Diagnostics</li> <li>Installation Issues</li> <li>Search Issues</li> <li>Performance Issues</li> <li>Configuration Issues</li> <li>Error Messages</li> <li>Debug Mode</li> <li>Getting Help</li> </ul>"},{"location":"troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":""},{"location":"troubleshooting/#health-check","title":"Health Check","text":"<p>Run this quick health check to identify common issues:</p> <pre><code># Check pysearch installation\npysearch --version\n\n# Test basic functionality\npysearch find --pattern \"import\" --path . --stats\n\n# Check configuration\npython -c \"\nfrom pysearch.config import SearchConfig\nconfig = SearchConfig()\nprint('\u2705 Configuration loaded successfully')\nprint(f'Paths: {config.paths}')\nprint(f'Include: {config.get_include_patterns()[:3]}...')\nprint(f'Exclude: {config.get_exclude_patterns()[:3]}...')\n\"\n\n# Check dependencies\npython -c \"\nimport sys\nprint(f'Python: {sys.version}')\n\ntry:\n    import regex\n    print('\u2705 regex library available')\nexcept ImportError:\n    print('\u274c regex library missing')\n\ntry:\n    import rich\n    print('\u2705 rich library available')\nexcept ImportError:\n    print('\u274c rich library missing')\n\ntry:\n    import orjson\n    print('\u2705 orjson library available')\nexcept ImportError:\n    print('\u274c orjson library missing')\n\"\n</code></pre>"},{"location":"troubleshooting/#system-information","title":"System Information","text":"<p>Gather system information for troubleshooting:</p> <pre><code># System info script\npython -c \"\nimport platform\nimport sys\nimport os\nfrom pathlib import Path\n\nprint('=== System Information ===')\nprint(f'OS: {platform.system()} {platform.release()}')\nprint(f'Python: {sys.version}')\nprint(f'Architecture: {platform.machine()}')\nprint(f'CPU cores: {os.cpu_count()}')\n\ntry:\n    import psutil\n    memory = psutil.virtual_memory()\n    print(f'Memory: {memory.total // (1024**3)} GB total, {memory.available // (1024**3)} GB available')\nexcept ImportError:\n    print('Memory: psutil not available')\n\nprint(f'Current directory: {Path.cwd()}')\nprint(f'Python executable: {sys.executable}')\n\ntry:\n    import pysearch\n    print(f'pysearch version: {pysearch.__version__}')\n    print(f'pysearch location: {pysearch.__file__}')\nexcept ImportError as e:\n    print(f'pysearch import error: {e}')\n\"\n</code></pre>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#python-version-problems","title":"Python Version Problems","text":"<p>Issue: <code>ERROR: Python 3.10 or higher is required</code></p> <p>Diagnosis:</p> <pre><code>python --version\npython3 --version\nwhich python\nwhich python3\n</code></pre> <p>Solutions:</p> <ol> <li>Install correct Python version:</li> </ol> <pre><code># Using pyenv (recommended)\ncurl https://pyenv.run | bash\npyenv install 3.11.0\npyenv global 3.11.0\n\n# Using system package manager\n# Ubuntu/Debian:\nsudo apt update &amp;&amp; sudo apt install python3.11\n\n# macOS with Homebrew:\nbrew install python@3.11\n\n# Windows: Download from python.org\n</code></pre> <ol> <li>Use specific Python version:</li> </ol> <pre><code>python3.11 -m pip install pysearch\n</code></pre>"},{"location":"troubleshooting/#permission-errors","title":"Permission Errors","text":"<p>Issue: <code>Permission denied</code> or <code>Access is denied</code></p> <p>Diagnosis:</p> <pre><code>pip install --user --dry-run pysearch\nls -la $(python -m site --user-base)/bin/\n</code></pre> <p>Solutions:</p> <ol> <li>User installation:</li> </ol> <pre><code>pip install --user pysearch\n</code></pre> <ol> <li>Virtual environment:</li> </ol> <pre><code>python -m venv pysearch-env\nsource pysearch-env/bin/activate  # Linux/macOS\n# pysearch-env\\Scripts\\activate   # Windows\npip install pysearch\n</code></pre> <ol> <li>Fix permissions (Linux/macOS):</li> </ol> <pre><code>sudo chown -R $USER:$USER ~/.local\n</code></pre>"},{"location":"troubleshooting/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>Issue: <code>ERROR: pip's dependency resolver does not currently consider all the packages</code></p> <p>Diagnosis:</p> <pre><code>pip check\npip list --outdated\n</code></pre> <p>Solutions:</p> <ol> <li>Fresh environment:</li> </ol> <pre><code>python -m venv fresh-env\nsource fresh-env/bin/activate\npip install --upgrade pip\npip install pysearch\n</code></pre> <ol> <li>Dependency resolution:</li> </ol> <pre><code>pip install --upgrade pip\npip install --force-reinstall pysearch\n</code></pre> <ol> <li>Manual resolution:</li> </ol> <pre><code>pip uninstall conflicting-package\npip install pysearch\npip install conflicting-package\n</code></pre>"},{"location":"troubleshooting/#build-failures","title":"Build Failures","text":"<p>Issue: <code>Failed building wheel</code> or compilation errors</p> <p>Diagnosis:</p> <pre><code>pip install --verbose pysearch\ngcc --version  # Linux/macOS\n</code></pre> <p>Solutions:</p> <ol> <li>Update build tools:</li> </ol> <pre><code>pip install --upgrade pip setuptools wheel build\n</code></pre> <ol> <li>Install system dependencies:</li> </ol> <pre><code># Ubuntu/Debian:\nsudo apt install python3-dev build-essential libffi-dev\n\n# CentOS/RHEL:\nsudo yum install python3-devel gcc libffi-devel\n\n# macOS:\nxcode-select --install\n</code></pre> <ol> <li>Use pre-built wheels:</li> </ol> <pre><code>pip install --only-binary=all pysearch\n</code></pre>"},{"location":"troubleshooting/#search-issues","title":"Search Issues","text":""},{"location":"troubleshooting/#no-results-found","title":"No Results Found","text":"<p>Issue: Search returns no results when matches should exist</p> <p>Diagnosis:</p> <pre><code># Check if files are being scanned\npysearch find --pattern \"import\" --path . --stats\n\n# Test with very broad pattern\npysearch find --pattern \".\" --regex --path . --stats\n\n# Check include/exclude patterns\npysearch find --pattern \"pattern\" --include \"**/*\" --stats\n</code></pre> <p>Solutions:</p> <ol> <li>Verify paths:</li> </ol> <pre><code># Use absolute paths\npysearch find --pattern \"pattern\" --path /absolute/path/to/code\n\n# Check current directory\nls -la\n</code></pre> <ol> <li>Check patterns:</li> </ol> <pre><code># Test include patterns\npysearch find --pattern \"pattern\" --include \"**/*.py\" --include \"**/*.txt\"\n\n# Remove exclude patterns temporarily\npysearch find --pattern \"pattern\" --exclude \"\"\n</code></pre> <ol> <li>Content type issues:</li> </ol> <pre><code># Enable all content types\npysearch find --pattern \"pattern\" --docstrings --comments --strings\n</code></pre> <ol> <li>File size limits:</li> </ol> <pre><code># Increase file size limit\npysearch find --pattern \"pattern\" --max-file-size 10485760  # 10MB\n</code></pre>"},{"location":"troubleshooting/#incorrect-results","title":"Incorrect Results","text":"<p>Issue: Search returns unexpected or irrelevant results</p> <p>Diagnosis:</p> <pre><code># Check exact pattern matching\npysearch find --pattern \"exact_pattern\" --path .\n\n# Test regex escaping\npysearch find --pattern \"\\\\.\" --regex --path .  # Literal dot\n</code></pre> <p>Solutions:</p> <ol> <li>Pattern escaping:</li> </ol> <pre><code># Escape special characters\npysearch find --pattern \"\\\\[\\\\]\" --regex  # Literal brackets\n\n# Use non-regex search for literals\npysearch find --pattern \"[literal]\"  # No --regex flag\n</code></pre> <ol> <li>AST filtering:</li> </ol> <pre><code># Use AST filters for precise matching\npysearch find --pattern \"def\" --ast --filter-func-name \"^exact_name$\"\n</code></pre> <ol> <li>Context adjustment:</li> </ol> <pre><code># Reduce context to see exact matches\npysearch find --pattern \"pattern\" --context 0\n</code></pre>"},{"location":"troubleshooting/#encoding-issues","title":"Encoding Issues","text":"<p>Issue: <code>UnicodeDecodeError</code> or garbled text in results</p> <p>Diagnosis:</p> <pre><code># Check file encodings\npython -c \"\nimport chardet\nimport os\n\nfor root, dirs, files in os.walk('.'):\n    for file in files[:5]:  # Check first 5 files\n        if file.endswith('.py'):\n            path = os.path.join(root, file)\n            try:\n                with open(path, 'rb') as f:\n                    raw = f.read(1024)\n                    result = chardet.detect(raw)\n                    print(f'{path}: {result[\\\"encoding\\\"]} ({result[\\\"confidence\\\"]:.2f})')\n            except Exception as e:\n                print(f'{path}: Error - {e}')\n\"\n</code></pre> <p>Solutions:</p> <ol> <li>Skip problematic files:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --exclude \"**/problematic_file.py\"\n</code></pre> <ol> <li>Convert file encodings:</li> </ol> <pre><code># Convert to UTF-8\niconv -f ISO-8859-1 -t UTF-8 file.py &gt; file_utf8.py\n</code></pre> <ol> <li>Handle encoding in API:</li> </ol> <pre><code>from pysearch.utils import read_text_safely\n\n# This function handles encoding detection automatically\ncontent = read_text_safely(file_path)\n</code></pre>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-search-performance","title":"Slow Search Performance","text":"<p>Issue: Searches take too long to complete</p> <p>Diagnosis:</p> <pre><code># Profile search performance\ntime pysearch find --pattern \"pattern\" --path . --stats\n\n# Check file count\nfind . -name \"*.py\" | wc -l\n\n# Monitor resource usage\ntop -p $(pgrep -f pysearch)\n</code></pre> <p>Solutions:</p> <ol> <li>Optimize search scope:</li> </ol> <pre><code># Limit to specific directories\npysearch find --pattern \"pattern\" --path ./src --path ./tests\n\n# Add more exclusions\npysearch find --pattern \"pattern\" \\\n  --exclude \"**/.venv/**\" \\\n  --exclude \"**/.git/**\" \\\n  --exclude \"**/node_modules/**\" \\\n  --exclude \"**/__pycache__/**\"\n</code></pre> <ol> <li>Enable parallel processing:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --parallel --workers 8\n</code></pre> <ol> <li>Disable unnecessary features:</li> </ol> <pre><code># Skip docstrings and comments\npysearch find --pattern \"pattern\" --no-docstrings --no-comments\n\n# Reduce context\npysearch find --pattern \"pattern\" --context 1\n</code></pre> <ol> <li>Use caching:</li> </ol> <pre><code>from pysearch import PySearch, SearchConfig\n\nengine = PySearch(SearchConfig(paths=[\"./src\"]))\nengine.enable_caching(ttl=3600)  # 1 hour cache\n</code></pre>"},{"location":"troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Issue: pysearch uses too much memory</p> <p>Diagnosis:</p> <pre><code># Monitor memory usage\npython -c \"\nimport psutil\nimport os\nfrom pysearch import PySearch, SearchConfig\n\nprocess = psutil.Process(os.getpid())\nprint(f'Initial memory: {process.memory_info().rss / 1024 / 1024:.1f} MB')\n\nconfig = SearchConfig(paths=['.'])\nengine = PySearch(config)\nprint(f'After init: {process.memory_info().rss / 1024 / 1024:.1f} MB')\n\nresults = engine.search('def')\nprint(f'After search: {process.memory_info().rss / 1024 / 1024:.1f} MB')\nprint(f'Results: {len(results.items)} items')\n\"\n</code></pre> <p>Solutions:</p> <ol> <li>Limit file sizes:</li> </ol> <pre><code>config = SearchConfig(\n    file_size_limit=1_000_000,  # 1MB limit\n    max_file_bytes=1_000_000\n)\n</code></pre> <ol> <li>Reduce parallelism:</li> </ol> <pre><code>config = SearchConfig(\n    workers=2,  # Fewer workers\n    parallel=True\n)\n</code></pre> <ol> <li>Limit context:</li> </ol> <pre><code>config = SearchConfig(context=1)  # Minimal context\n</code></pre> <ol> <li>Process in batches:</li> </ol> <pre><code># Process large result sets in chunks\nfor i in range(0, len(results.items), 100):\n    batch = results.items[i:i+100]\n    process_batch(batch)\n</code></pre>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#configuration-not-loading","title":"Configuration Not Loading","text":"<p>Issue: Configuration file is ignored</p> <p>Diagnosis:</p> <pre><code># Check configuration file locations\nls -la pysearch.toml\nls -la ~/.config/pysearch/config.toml\nls -la /etc/pysearch/config.toml\n\n# Test configuration loading\npython -c \"\nimport tomllib\ntry:\n    with open('pysearch.toml', 'rb') as f:\n        config = tomllib.load(f)\n    print('\u2705 Configuration loaded successfully')\n    print(config)\nexcept FileNotFoundError:\n    print('\u274c Configuration file not found')\nexcept Exception as e:\n    print(f'\u274c Configuration error: {e}')\n\"\n</code></pre> <p>Solutions:</p> <ol> <li>Check file format:</li> </ol> <pre><code># Ensure proper TOML format\n[search]\npaths = [\"./src\"]  # Array syntax\nparallel = true    # Boolean syntax\n</code></pre> <ol> <li>Verify file location:</li> </ol> <pre><code># Create in correct location\nmkdir -p ~/.config/pysearch\ncp pysearch.toml ~/.config/pysearch/config.toml\n</code></pre> <ol> <li>Test configuration:</li> </ol> <pre><code>from pysearch.config import SearchConfig\n\n# Load with explicit validation\nconfig = SearchConfig()\nprint(f\"Loaded paths: {config.paths}\")\n</code></pre>"},{"location":"troubleshooting/#environment-variables-not-working","title":"Environment Variables Not Working","text":"<p>Issue: Environment variables are ignored</p> <p>Diagnosis:</p> <pre><code># Check environment variables\nenv | grep PYSEARCH\n\n# Test variable loading\npython -c \"\nimport os\nprint('PYSEARCH_PATHS:', os.environ.get('PYSEARCH_PATHS'))\nprint('PYSEARCH_PARALLEL:', os.environ.get('PYSEARCH_PARALLEL'))\n\"\n</code></pre> <p>Solutions:</p> <ol> <li>Set variables correctly:</li> </ol> <pre><code>export PYSEARCH_PATHS=\"./src:./tests\"\nexport PYSEARCH_PARALLEL=\"true\"\nexport PYSEARCH_WORKERS=\"4\"\n</code></pre> <ol> <li>Check variable names:</li> </ol> <pre><code># Use correct variable names (see configuration.md)\nexport PYSEARCH_CONTEXT=\"5\"  # Not PYSEARCH_CONTEXT_LINES\n</code></pre>"},{"location":"troubleshooting/#error-messages","title":"Error Messages","text":""},{"location":"troubleshooting/#common-error-messages-and-solutions","title":"Common Error Messages and Solutions","text":""},{"location":"troubleshooting/#modulenotfounderror-no-module-named-pysearch","title":"<code>ModuleNotFoundError: No module named 'pysearch'</code>","text":"<p>Cause: pysearch not installed or not in Python path</p> <p>Solution:</p> <pre><code>pip install pysearch\n# Or check virtual environment activation\n</code></pre>"},{"location":"troubleshooting/#filenotfounderror-errno-2-no-such-file-or-directory","title":"<code>FileNotFoundError: [Errno 2] No such file or directory</code>","text":"<p>Cause: Invalid search path</p> <p>Solution:</p> <pre><code># Use absolute paths or verify current directory\npysearch find --pattern \"pattern\" --path $(pwd)/src\n</code></pre>"},{"location":"troubleshooting/#permissionerror-errno-13-permission-denied","title":"<code>PermissionError: [Errno 13] Permission denied</code>","text":"<p>Cause: Insufficient permissions to read files</p> <p>Solution:</p> <pre><code># Check file permissions\nls -la problematic_file.py\n\n# Skip inaccessible files\npysearch find --pattern \"pattern\" --exclude \"**/restricted/**\"\n</code></pre>"},{"location":"troubleshooting/#regexerror-bad-character-range","title":"<code>regex.error: bad character range</code>","text":"<p>Cause: Invalid regex pattern</p> <p>Solution:</p> <pre><code># Escape special characters\npysearch find --pattern \"\\\\[a-z\\\\]\" --regex\n\n# Or use literal search\npysearch find --pattern \"[a-z]\"  # No --regex flag\n</code></pre>"},{"location":"troubleshooting/#oserror-errno-24-too-many-open-files","title":"<code>OSError: [Errno 24] Too many open files</code>","text":"<p>Cause: File descriptor limit exceeded</p> <p>Solution:</p> <pre><code># Increase file descriptor limit\nulimit -n 4096\n\n# Or reduce parallel workers\npysearch find --pattern \"pattern\" --workers 2\n</code></pre>"},{"location":"troubleshooting/#debug-mode","title":"Debug Mode","text":""},{"location":"troubleshooting/#enabling-debug-output","title":"Enabling Debug Output","text":"<pre><code># Environment variable\nexport PYSEARCH_DEBUG=1\npysearch find --pattern \"pattern\"\n\n# Python API\nfrom pysearch.logging_config import enable_debug_logging\nenable_debug_logging()\n</code></pre>"},{"location":"troubleshooting/#debug-information","title":"Debug Information","text":"<p>Debug mode provides:</p> <ul> <li>File scanning progress</li> <li>Pattern matching details</li> <li>Performance metrics</li> <li>Error stack traces</li> <li>Cache hit/miss statistics</li> </ul>"},{"location":"troubleshooting/#collecting-debug-information","title":"Collecting Debug Information","text":"<pre><code># Comprehensive debug output\nPYSEARCH_DEBUG=1 pysearch find --pattern \"pattern\" --stats 2&gt;&amp;1 | tee debug.log\n\n# Python debug session\npython -c \"\nfrom pysearch.logging_config import enable_debug_logging\nfrom pysearch import PySearch, SearchConfig\n\nenable_debug_logging()\n\nconfig = SearchConfig(paths=['.'])\nengine = PySearch(config)\nresults = engine.search('pattern')\n\nprint(f'Debug complete. Results: {len(results.items)}')\n\"\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#before-asking-for-help","title":"Before Asking for Help","text":"<ol> <li>Check this troubleshooting guide</li> <li>Review the FAQ: FAQ</li> <li>Search existing issues on GitHub</li> <li>Try the quick diagnostics above</li> </ol>"},{"location":"troubleshooting/#when-reporting-issues","title":"When Reporting Issues","text":"<p>Include this information:</p> <pre><code># System information\npython --version\npysearch --version\nuname -a  # Linux/macOS\nsysteminfo  # Windows\n\n# Error reproduction\nPYSEARCH_DEBUG=1 pysearch find --pattern \"your_pattern\" --path . 2&gt;&amp;1\n\n# Configuration\ncat pysearch.toml  # If using config file\nenv | grep PYSEARCH  # Environment variables\n</code></pre>"},{"location":"troubleshooting/#where-to-get-help","title":"Where to Get Help","text":"<ol> <li>GitHub Issues: For bugs and feature requests</li> <li>GitHub Discussions: For questions and community help</li> <li>Documentation: Check all docs in <code>docs/</code> directory</li> <li>Stack Overflow: Tag questions with <code>pysearch</code></li> </ol>"},{"location":"troubleshooting/#creating-good-bug-reports","title":"Creating Good Bug Reports","text":"<p>Include:</p> <ul> <li>Clear description of the problem</li> <li>Steps to reproduce the issue</li> <li>Expected behavior vs. actual behavior</li> <li>System information (OS, Python version, pysearch version)</li> <li>Minimal example that demonstrates the issue</li> <li>Debug output if available</li> </ul>"},{"location":"troubleshooting/#feature-requests","title":"Feature Requests","text":"<p>For feature requests:</p> <ul> <li>Check the roadmap: roadmap.md</li> <li>Describe the use case clearly</li> <li>Explain the benefits to other users</li> <li>Suggest implementation if you have ideas</li> </ul>"},{"location":"troubleshooting/#contributing-to-troubleshooting","title":"Contributing to Troubleshooting","text":"<p>Help improve this guide by:</p> <ul> <li>Adding solutions for issues you've encountered</li> <li>Improving existing solutions with better approaches</li> <li>Adding diagnostic commands for common problems</li> <li>Updating error messages as they change</li> </ul> <p>Submit improvements via pull requests or GitHub issues.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide covers how to use pysearch effectively, from basic searches to advanced features.</p>"},{"location":"usage/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Quick Start</li> <li>Command Line Interface</li> <li>Python API</li> <li>Search Types</li> <li>Output Formats</li> <li>Advanced Features</li> <li>Performance Tips</li> <li>Troubleshooting</li> </ul>"},{"location":"usage/#installation","title":"Installation","text":""},{"location":"usage/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>Operating System: Linux, macOS, or Windows</li> </ul>"},{"location":"usage/#basic-installation","title":"Basic Installation","text":"<pre><code># Install from source\npip install -e .\n\n# Or with pip (when published)\npip install pysearch\n</code></pre>"},{"location":"usage/#development-installation","title":"Development Installation","text":"<p>For contributors and advanced users:</p> <pre><code># Install with development dependencies\npip install -e \".[dev]\"\n\n# Install pre-commit hooks\npre-commit install\n\n# Verify installation\nmake validate\n</code></pre>"},{"location":"usage/#verification","title":"Verification","text":"<p>Test your installation:</p> <pre><code># Check version\npysearch --version\n\n# Run basic search\npysearch find --pattern \"def main\" --path .\n\n# Run validation suite\n./scripts/validate-project.sh\n</code></pre>"},{"location":"usage/#quick-start","title":"Quick Start","text":""},{"location":"usage/#30-second-example","title":"30-Second Example","text":"<pre><code># Find all function definitions in Python files\npysearch find --pattern \"def \" --path ./src --include \"**/*.py\"\n\n# Search with regex for handler functions\npysearch find --pattern \"def.*handler\" --regex --context 3\n\n# Find class definitions with AST filtering\npysearch find --pattern \"class\" --ast --filter-class-name \".*Test\"\n</code></pre>"},{"location":"usage/#first-python-script","title":"First Python Script","text":"<pre><code>from pysearch import PySearch, SearchConfig\n\n# Create search engine\nconfig = SearchConfig(paths=[\"./src\"], include=[\"**/*.py\"])\nengine = PySearch(config)\n\n# Perform search\nresults = engine.search(\"def main\")\n\n# Display results\nfor item in results.items:\n    print(f\"{item.file}: lines {item.start_line}-{item.end_line}\")\n</code></pre>"},{"location":"usage/#command-line-interface","title":"Command Line Interface","text":""},{"location":"usage/#basic-syntax","title":"Basic Syntax","text":"<pre><code>pysearch find [OPTIONS] --pattern PATTERN\n</code></pre>"},{"location":"usage/#essential-options","title":"Essential Options","text":""},{"location":"usage/#search-scope","title":"Search Scope","text":"<pre><code># Single path\npysearch find --path ./src --pattern \"pattern\"\n\n# Multiple paths\npysearch find --path ./src --path ./tests --pattern \"pattern\"\n\n# Include specific file types\npysearch find --include \"**/*.py\" --include \"**/*.pyx\" --pattern \"pattern\"\n\n# Exclude directories\npysearch find --exclude \"**/.venv/**\" --exclude \"**/build/**\" --pattern \"pattern\"\n</code></pre>"},{"location":"usage/#search-modes","title":"Search Modes","text":"<pre><code># Text search (default)\npysearch find --pattern \"def main\"\n\n# Regex search\npysearch find --pattern \"def.*handler\" --regex\n\n# AST structural search\npysearch find --pattern \"def\" --ast --filter-func-name \"main\"\n\n# Semantic search (experimental)\npysearch find --pattern \"database connection\" --semantic\n</code></pre>"},{"location":"usage/#output-control","title":"Output Control","text":"<pre><code># Control context lines\npysearch find --pattern \"pattern\" --context 5\n\n# Choose output format\npysearch find --pattern \"pattern\" --format json\npysearch find --pattern \"pattern\" --format highlight\n\n# Show performance statistics\npysearch find --pattern \"pattern\" --stats\n</code></pre>"},{"location":"usage/#advanced-cli-options","title":"Advanced CLI Options","text":""},{"location":"usage/#ast-filters","title":"AST Filters","text":"<pre><code># Filter by function names\npysearch find --pattern \"def\" --ast --filter-func-name \".*handler\"\n\n# Filter by class names\npysearch find --pattern \"class\" --ast --filter-class-name \"Test.*\"\n\n# Filter by decorators\npysearch find --pattern \"def\" --ast --filter-decorator \"lru_cache\"\n\n# Filter by imports\npysearch find --pattern \"import\" --ast --filter-import \"requests.*\"\n\n# Combine multiple filters\npysearch find --pattern \"def\" --ast \\\n  --filter-func-name \".*handler\" \\\n  --filter-decorator \"lru_cache\"\n</code></pre>"},{"location":"usage/#content-filtering","title":"Content Filtering","text":"<pre><code># Skip docstrings\npysearch find --pattern \"pattern\" --no-docstrings\n\n# Skip comments\npysearch find --pattern \"pattern\" --no-comments\n\n# Skip string literals\npysearch find --pattern \"pattern\" --no-strings\n\n# Search only in code\npysearch find --pattern \"pattern\" --no-docstrings --no-comments --no-strings\n</code></pre>"},{"location":"usage/#performance-options","title":"Performance Options","text":"<pre><code># Enable parallel processing\npysearch find --pattern \"pattern\" --parallel --workers 8\n\n# Set file size limits\npysearch find --pattern \"pattern\" --max-file-size 1048576  # 1MB\n\n# Enable caching\npysearch find --pattern \"pattern\" --cache --cache-ttl 3600\n</code></pre>"},{"location":"usage/#complete-cli-example","title":"Complete CLI Example","text":"<pre><code>pysearch find \\\n  --path ./src --path ./tests \\\n  --include \"**/*.py\" \\\n  --exclude \"**/.venv/**\" \"**/__pycache__/**\" \\\n  --pattern \"async def.*handler\" \\\n  --regex \\\n  --context 4 \\\n  --format json \\\n  --filter-func-name \".*handler$\" \\\n  --filter-decorator \"lru_cache\" \\\n  --no-docstrings \\\n  --parallel \\\n  --stats\n</code></pre>"},{"location":"usage/#python-api","title":"Python API","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<pre><code>from pysearch import PySearch, SearchConfig\nfrom pysearch.types import Query, OutputFormat\n\n# Create configuration\nconfig = SearchConfig(\n    paths=[\"./src\"],\n    include=[\"**/*.py\"],\n    exclude=[\"**/.venv/**\"],\n    context=3\n)\n\n# Initialize search engine\nengine = PySearch(config)\n\n# Simple search\nresults = engine.search(\"def main\")\n\n# Process results\nfor item in results.items:\n    print(f\"Found in {item.file}:\")\n    for line in item.lines:\n        print(f\"  {line}\")\n</code></pre>"},{"location":"usage/#advanced-api-usage","title":"Advanced API Usage","text":"<pre><code>from pysearch import PySearch, SearchConfig\nfrom pysearch.types import Query, ASTFilters, MetadataFilters, Language\n\n# Advanced configuration\nconfig = SearchConfig(\n    paths=[\"./src\", \"./tests\"],\n    include=[\"**/*.py\", \"**/*.pyx\"],\n    exclude=[\"**/.venv/**\", \"**/build/**\"],\n    context=5,\n    parallel=True,\n    workers=4,\n    enable_docstrings=True,\n    enable_comments=False,\n    enable_strings=True\n)\n\n# Create search engine with caching\nengine = PySearch(config)\nengine.enable_caching(ttl=3600)\n\n# Complex query with filters\nast_filters = ASTFilters(\n    func_name=\".*handler$\",\n    decorator=\"(lru_cache|cache)\",\n    class_name=\".*Manager\"\n)\n\nmetadata_filters = MetadataFilters(\n    min_lines=50,\n    max_size=1024*1024,  # 1MB\n    languages={Language.PYTHON},\n    modified_after=\"2024-01-01\"\n)\n\nquery = Query(\n    pattern=\"async def.*handler\",\n    use_regex=True,\n    use_ast=True,\n    context=5,\n    output=OutputFormat.JSON,\n    ast_filters=ast_filters,\n    metadata_filters=metadata_filters,\n    search_docstrings=False\n)\n\n# Execute search\nresults = engine.run(query)\n\n# Analyze results\nprint(f\"Found {len(results.items)} matches in {results.stats.elapsed_ms:.1f}ms\")\nprint(f\"Scanned {results.stats.files_scanned} files\")\n\nfor item in results.items:\n    print(f\"\\n{item.file} (score: {item.score:.2f}):\")\n    print(f\"  Lines {item.start_line}-{item.end_line}\")\n\n    # Show match spans for highlighting\n    for span in item.match_spans:\n        line_idx, (start_col, end_col) = span\n        actual_line = item.start_line + line_idx\n        print(f\"    Match at line {actual_line}, columns {start_col}-{end_col}\")\n</code></pre>"},{"location":"usage/#api-integration-patterns","title":"API Integration Patterns","text":""},{"location":"usage/#batch-processing","title":"Batch Processing","text":"<pre><code>def batch_search(engine, patterns):\n    \"\"\"Process multiple search patterns efficiently.\"\"\"\n    results = []\n\n    for pattern in patterns:\n        query = Query(pattern=pattern, use_regex=True)\n        result = engine.run(query)\n        results.append({\n            'pattern': pattern,\n            'matches': len(result.items),\n            'files': result.stats.files_matched,\n            'time_ms': result.stats.elapsed_ms\n        })\n\n    return results\n\n# Usage\npatterns = [\"def.*handler\", \"class.*Test\", \"import requests\"]\nbatch_results = batch_search(engine, patterns)\n</code></pre>"},{"location":"usage/#result-processing","title":"Result Processing","text":"<pre><code>def analyze_results(results):\n    \"\"\"Analyze search results for insights.\"\"\"\n\n    # Group by file\n    by_file = {}\n    for item in results.items:\n        if item.file not in by_file:\n            by_file[item.file] = []\n        by_file[item.file].append(item)\n\n    # Find hotspots (files with many matches)\n    hotspots = sorted(\n        by_file.items(),\n        key=lambda x: len(x[1]),\n        reverse=True\n    )[:5]\n\n    print(\"Top files with matches:\")\n    for file_path, items in hotspots:\n        print(f\"  {file_path}: {len(items)} matches\")\n\n    return by_file\n\n# Usage\nanalysis = analyze_results(results)\n</code></pre>"},{"location":"usage/#search-types","title":"Search Types","text":""},{"location":"usage/#text-search","title":"Text Search","text":"<p>Simple string matching within file contents.</p> <pre><code># CLI\npysearch find --pattern \"TODO\"\n\n# API\nresults = engine.search(\"TODO\")\n</code></pre> <p>Use cases:</p> <ul> <li>Finding specific strings or comments</li> <li>Locating configuration values</li> <li>Searching for error messages</li> </ul>"},{"location":"usage/#regex-search","title":"Regex Search","text":"<p>Pattern matching using regular expressions.</p> <pre><code># CLI\npysearch find --pattern \"def.*handler\" --regex\n\n# API\nresults = engine.search(r\"def.*handler\", regex=True)\n</code></pre> <p>Use cases:</p> <ul> <li>Complex pattern matching</li> <li>Finding functions with specific naming patterns</li> <li>Matching structured data</li> </ul>"},{"location":"usage/#ast-search","title":"AST Search","text":"<p>Structural search using Abstract Syntax Tree parsing.</p> <pre><code># CLI\npysearch find --pattern \"def\" --ast --filter-func-name \"main\"\n\n# API\nfrom pysearch.types import ASTFilters\nfilters = ASTFilters(func_name=\"main\")\nresults = engine.search(\"def\", use_ast=True, filters=filters)\n</code></pre> <p>Use cases:</p> <ul> <li>Finding specific code structures</li> <li>Locating functions, classes, or decorators</li> <li>Analyzing code patterns</li> </ul>"},{"location":"usage/#semantic-search","title":"Semantic Search","text":"<p>Conceptual search using lightweight semantic analysis.</p> <pre><code># CLI\npysearch find --pattern \"database connection\" --semantic\n\n# API\nresults = engine.search(\"database connection\", use_semantic=True)\n</code></pre> <p>Use cases:</p> <ul> <li>Finding conceptually related code</li> <li>Discovering similar functionality</li> <li>Code exploration and understanding</li> </ul>"},{"location":"usage/#output-formats","title":"Output Formats","text":""},{"location":"usage/#text-format-default","title":"Text Format (Default)","text":"<p>Human-readable plain text output.</p> <pre><code>pysearch find --pattern \"def main\" --format text\n</code></pre> <p>Features:</p> <ul> <li>Easy to read</li> <li>Good for terminal output</li> <li>Supports context lines</li> </ul>"},{"location":"usage/#json-format","title":"JSON Format","text":"<p>Machine-readable structured output.</p> <pre><code>pysearch find --pattern \"def main\" --format json\n</code></pre> <p>Features:</p> <ul> <li>Structured data</li> <li>Easy to parse programmatically</li> <li>Includes metadata and statistics</li> </ul> <p>Example output:</p> <pre><code>{\n  \"query\": {\n    \"pattern\": \"def main\",\n    \"use_regex\": false\n  },\n  \"stats\": {\n    \"files_scanned\": 42,\n    \"total_matches\": 3,\n    \"elapsed_ms\": 125.5\n  },\n  \"items\": [\n    {\n      \"file\": \"src/main.py\",\n      \"start_line\": 10,\n      \"end_line\": 12,\n      \"lines\": [\"def main():\", \"    print('Hello')\", \"    return 0\"],\n      \"score\": 1.0\n    }\n  ]\n}\n</code></pre>"},{"location":"usage/#highlight-format","title":"Highlight Format","text":"<p>Interactive terminal output with syntax highlighting.</p> <pre><code>pysearch find --pattern \"def main\" --format highlight\n</code></pre> <p>Features:</p> <ul> <li>Syntax highlighting</li> <li>Color-coded matches</li> <li>Interactive terminal display</li> <li>Requires TTY support</li> </ul>"},{"location":"usage/#advanced-features","title":"Advanced Features","text":""},{"location":"usage/#caching","title":"Caching","text":"<p>Enable result caching for improved performance on repeated searches.</p> <pre><code># Enable caching\nengine.enable_caching(ttl=3600)  # 1 hour cache\n\n# Custom cache directory\nengine.enable_caching(cache_dir=\"./custom-cache\", ttl=7200)\n</code></pre>"},{"location":"usage/#file-watching","title":"File Watching","text":"<p>Automatically update search index when files change.</p> <pre><code># Enable auto-watching\nengine.enable_auto_watch()\n\n# Now the index updates automatically when files change\nresults = engine.search(\"pattern\")  # Always uses fresh index\n</code></pre>"},{"location":"usage/#multi-repository-search","title":"Multi-Repository Search","text":"<p>Search across multiple repositories or projects.</p> <pre><code>from pysearch.multi_repo import RepositoryInfo\n\n# Configure repositories\nrepos = [\n    RepositoryInfo(name=\"main\", path=\"./\", priority=1.0),\n    RepositoryInfo(name=\"lib\", path=\"../shared-lib\", priority=0.8),\n    RepositoryInfo(name=\"tools\", path=\"../tools\", priority=0.6)\n]\n\n# Enable multi-repo search\nengine.enable_multi_repo(repos)\n\n# Search across all repositories\nresults = engine.search(\"pattern\")\n</code></pre>"},{"location":"usage/#custom-scoring","title":"Custom Scoring","text":"<p>Implement custom result scoring and ranking.</p> <pre><code>from pysearch.scorer import RankingStrategy\n\n# Custom ranking configuration\nconfig = SearchConfig(\n    rank_strategy=RankingStrategy.DEFAULT,\n    ast_weight=2.0,  # Boost AST matches\n    text_weight=1.0  # Standard text matches\n)\n</code></pre>"},{"location":"usage/#performance-tips","title":"Performance Tips","text":""},{"location":"usage/#optimize-search-scope","title":"Optimize Search Scope","text":"<pre><code># Good: Specific paths and patterns\nconfig = SearchConfig(\n    paths=[\"./src\"],  # Specific directory\n    include=[\"**/*.py\"],  # Specific file types\n    exclude=[\"**/.venv/**\", \"**/__pycache__/**\"]  # Exclude build artifacts\n)\n\n# Avoid: Too broad scope\nconfig = SearchConfig(\n    paths=[\".\"],  # Entire project\n    include=None,  # All files\n    exclude=None  # No exclusions\n)\n</code></pre>"},{"location":"usage/#enable-parallel-processing","title":"Enable Parallel Processing","text":"<pre><code>config = SearchConfig(\n    parallel=True,\n    workers=8,  # Adjust based on CPU cores\n    strict_hash_check=False  # Faster file change detection\n)\n</code></pre>"},{"location":"usage/#use-appropriate-search-types","title":"Use Appropriate Search Types","text":"<pre><code># Fast: Text search for simple patterns\nresults = engine.search(\"TODO\")\n\n# Medium: Regex for complex patterns\nresults = engine.search(r\"def.*handler\", regex=True)\n\n# Slower: AST for structural search (but more precise)\nresults = engine.search(\"def\", use_ast=True, filters=filters)\n</code></pre>"},{"location":"usage/#configure-content-filtering","title":"Configure Content Filtering","text":"<pre><code># Skip unnecessary content types for better performance\nconfig = SearchConfig(\n    enable_docstrings=False,  # Skip docstrings\n    enable_comments=False,    # Skip comments\n    enable_strings=True       # Keep string literals\n)\n</code></pre>"},{"location":"usage/#set-file-size-limits","title":"Set File Size Limits","text":"<pre><code>config = SearchConfig(\n    file_size_limit=1_000_000,  # 1MB limit\n    max_file_bytes=1_000_000    # Backup limit\n)\n</code></pre>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#common-issues","title":"Common Issues","text":""},{"location":"usage/#no-matches-found","title":"No Matches Found","text":"<p>Problem: Search returns no results despite expecting matches.</p> <p>Solutions:</p> <ol> <li>Check include/exclude patterns:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --include \"**/*.py\" --stats\n</code></pre> <ol> <li>Verify file paths:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --path ./correct/path\n</code></pre> <ol> <li>Test with broader patterns:</li> </ol> <pre><code>pysearch find --pattern \"def\" --regex  # Should find function definitions\n</code></pre>"},{"location":"usage/#slow-performance","title":"Slow Performance","text":"<p>Problem: Search takes too long to complete.</p> <p>Solutions:</p> <ol> <li>Reduce search scope:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --path ./specific/dir\n</code></pre> <ol> <li>Add exclusions:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --exclude \"**/.venv/**\" \"**/.git/**\"\n</code></pre> <ol> <li>Disable unnecessary parsing:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --no-docstrings --no-comments\n</code></pre> <ol> <li>Enable parallel processing:</li> </ol> <pre><code>pysearch find --pattern \"pattern\" --parallel --workers 4\n</code></pre>"},{"location":"usage/#encoding-issues","title":"Encoding Issues","text":"<p>Problem: Files with special characters cause errors.</p> <p>Solutions:</p> <ol> <li>Ensure UTF-8 encoding:</li> </ol> <pre><code># Check file encoding\nwith open('file.py', 'rb') as f:\n    raw = f.read()\n    encoding = chardet.detect(raw)['encoding']\n</code></pre> <ol> <li>Configure encoding handling:</li> </ol> <pre><code>config = SearchConfig(\n    # pysearch handles encoding automatically\n    # but you can check file metadata\n)\n</code></pre>"},{"location":"usage/#memory-issues","title":"Memory Issues","text":"<p>Problem: High memory usage on large codebases.</p> <p>Solutions:</p> <ol> <li>Set file size limits:</li> </ol> <pre><code>config = SearchConfig(file_size_limit=1_000_000)  # 1MB\n</code></pre> <ol> <li>Reduce parallel workers:</li> </ol> <pre><code>config = SearchConfig(workers=2)  # Fewer workers\n</code></pre> <ol> <li>Use streaming for large results:</li> </ol> <pre><code># Process results in batches\nfor item in results.items[:100]:  # First 100 results\n    process_item(item)\n</code></pre>"},{"location":"usage/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging for troubleshooting:</p> <pre><code>from pysearch.logging_config import enable_debug_logging\n\nenable_debug_logging()\nresults = engine.search(\"pattern\")  # Will show detailed logs\n</code></pre> <pre><code># CLI debug mode\nPYSEARCH_DEBUG=1 pysearch find --pattern \"pattern\"\n</code></pre>"},{"location":"usage/#getting-help","title":"Getting Help","text":"<ol> <li>Check documentation: See API Reference for detailed information</li> <li>Review examples: Check the <code>examples/</code> directory for working code</li> <li>Run diagnostics: Use <code>--stats</code> flag to see performance metrics</li> <li>Enable logging: Use debug mode to see what's happening internally</li> </ol>"},{"location":"usage/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Monitor search performance\nresults = engine.search(\"pattern\")\nstats = results.stats\n\nprint(f\"Performance Report:\")\nprint(f\"  Files scanned: {stats.files_scanned}\")\nprint(f\"  Files matched: {stats.files_matched}\")\nprint(f\"  Total matches: {stats.total_matches}\")\nprint(f\"  Elapsed time: {stats.elapsed_ms:.1f}ms\")\nprint(f\"  Cache hits: {stats.cache_hits}\")\nprint(f\"  Cache misses: {stats.cache_misses}\")\n\n# Calculate efficiency metrics\nif stats.files_scanned &gt; 0:\n    match_rate = stats.files_matched / stats.files_scanned\n    print(f\"  Match rate: {match_rate:.2%}\")\n\nif stats.cache_hits + stats.cache_misses &gt; 0:\n    cache_efficiency = stats.cache_hits / (stats.cache_hits + stats.cache_misses)\n    print(f\"  Cache efficiency: {cache_efficiency:.2%}\")\n</code></pre>"},{"location":"usage/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Configuration: See Configuration Guide</li> <li>API Reference: Check API Reference for detailed documentation</li> <li>Architecture: Learn about internals in Architecture</li> <li>Examples: Explore practical examples in the <code>examples/</code> directory</li> <li>Contributing: See Contributing Guide to contribute</li> </ul>"}]}